// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/hadoop/cms/store/user/phchang/metis/baby/HWW2016_v5.0.1/MAKER_GluGluHToWWToLNuQQ_M125_13TeV_powheg_JHUGenV628_pythia8_RunIISummer16MiniAODv2-PUMoriond17_80X_mcRun2_asymptotic_2016_TrancheIV_v6-v1_MINIAODSIM_HWW2016_v5.0.1/output_1.root", "t", "hwwtree", "tas", "hww")

#ifndef hwwtree_H
#define hwwtree_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class hwwtree {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  int      isData_;
  TBranch *isData_branch;
  bool     isData_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  float    genps_weight_;
  TBranch *genps_weight_branch;
  bool     genps_weight_isLoaded;
  float    xsec_br_;
  TBranch *xsec_br_branch;
  bool     xsec_br_isLoaded;
  int      evt_passgoodrunlist_;
  TBranch *evt_passgoodrunlist_branch;
  bool     evt_passgoodrunlist_isLoaded;
  TString *CMS4path_;
  TBranch *CMS4path_branch;
  bool     CMS4path_isLoaded;
  int      CMS4index_;
  TBranch *CMS4index_branch;
  bool     CMS4index_isLoaded;
  float    weight_fr_r1_f1_;
  TBranch *weight_fr_r1_f1_branch;
  bool     weight_fr_r1_f1_isLoaded;
  float    weight_fr_r1_f2_;
  TBranch *weight_fr_r1_f2_branch;
  bool     weight_fr_r1_f2_isLoaded;
  float    weight_fr_r1_f0p5_;
  TBranch *weight_fr_r1_f0p5_branch;
  bool     weight_fr_r1_f0p5_isLoaded;
  float    weight_fr_r2_f1_;
  TBranch *weight_fr_r2_f1_branch;
  bool     weight_fr_r2_f1_isLoaded;
  float    weight_fr_r2_f2_;
  TBranch *weight_fr_r2_f2_branch;
  bool     weight_fr_r2_f2_isLoaded;
  float    weight_fr_r2_f0p5_;
  TBranch *weight_fr_r2_f0p5_branch;
  bool     weight_fr_r2_f0p5_isLoaded;
  float    weight_fr_r0p5_f1_;
  TBranch *weight_fr_r0p5_f1_branch;
  bool     weight_fr_r0p5_f1_isLoaded;
  float    weight_fr_r0p5_f2_;
  TBranch *weight_fr_r0p5_f2_branch;
  bool     weight_fr_r0p5_f2_isLoaded;
  float    weight_fr_r0p5_f0p5_;
  TBranch *weight_fr_r0p5_f0p5_branch;
  bool     weight_fr_r0p5_f0p5_isLoaded;
  float    weight_pdf_up_;
  TBranch *weight_pdf_up_branch;
  bool     weight_pdf_up_isLoaded;
  float    weight_pdf_down_;
  TBranch *weight_pdf_down_branch;
  bool     weight_pdf_down_isLoaded;
  float    weight_alphas_down_;
  TBranch *weight_alphas_down_branch;
  bool     weight_alphas_down_isLoaded;
  float    weight_alphas_up_;
  TBranch *weight_alphas_up_branch;
  bool     weight_alphas_up_isLoaded;
  int      nrecolep_;
  TBranch *nrecolep_branch;
  bool     nrecolep_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *lep_p4_;
  TBranch *lep_p4_branch;
  bool     lep_p4_isLoaded;
  int      nak8jets_;
  TBranch *nak8jets_branch;
  bool     nak8jets_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *ak8jets_p4_;
  TBranch *ak8jets_p4_branch;
  bool     ak8jets_p4_isLoaded;
  int      nj_;
  TBranch *nj_branch;
  bool     nj_isLoaded;
  int      nb_;
  TBranch *nb_branch;
  bool     nb_isLoaded;
  int      nbmed_;
  TBranch *nbmed_branch;
  bool     nbmed_isLoaded;
  int      nbtight_;
  TBranch *nbtight_branch;
  bool     nbtight_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *jets_p4_;
  TBranch *jets_p4_branch;
  bool     jets_p4_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *alljets_p4_;
  TBranch *alljets_p4_branch;
  bool     alljets_p4_isLoaded;
  vector<int> *jets_idx_;
  TBranch *jets_idx_branch;
  bool     jets_idx_isLoaded;
  vector<int> *alljets_idx_;
  TBranch *alljets_idx_branch;
  bool     alljets_idx_isLoaded;
  float    met_pt_;
  TBranch *met_pt_branch;
  bool     met_pt_isLoaded;
  float    met_phi_;
  TBranch *met_phi_branch;
  bool     met_phi_isLoaded;
  float    met_up_pt_;
  TBranch *met_up_pt_branch;
  bool     met_up_pt_isLoaded;
  float    met_up_phi_;
  TBranch *met_up_phi_branch;
  bool     met_up_phi_isLoaded;
  float    met_dn_pt_;
  TBranch *met_dn_pt_branch;
  bool     met_dn_pt_isLoaded;
  float    met_dn_phi_;
  TBranch *met_dn_phi_branch;
  bool     met_dn_phi_isLoaded;
  float    met_gen_pt_;
  TBranch *met_gen_pt_branch;
  bool     met_gen_pt_isLoaded;
  float    met_gen_phi_;
  TBranch *met_gen_phi_branch;
  bool     met_gen_phi_isLoaded;
  int      HLT_Ele27_WPLoose_Gsf_;
  TBranch *HLT_Ele27_WPLoose_Gsf_branch;
  bool     HLT_Ele27_WPLoose_Gsf_isLoaded;
  int      HLT_Ele30_WPLoose_Gsf_;
  TBranch *HLT_Ele30_WPLoose_Gsf_branch;
  bool     HLT_Ele30_WPLoose_Gsf_isLoaded;
  int      HLT_Ele45_WPLoose_Gsf_;
  TBranch *HLT_Ele45_WPLoose_Gsf_branch;
  bool     HLT_Ele45_WPLoose_Gsf_isLoaded;
  int      HLT_Ele105_CaloIdVT_GsfTrkIdT_;
  TBranch *HLT_Ele105_CaloIdVT_GsfTrkIdT_branch;
  bool     HLT_Ele105_CaloIdVT_GsfTrkIdT_isLoaded;
  int      HLT_Ele115_CaloIdVT_GsfTrkIdT_;
  TBranch *HLT_Ele115_CaloIdVT_GsfTrkIdT_branch;
  bool     HLT_Ele115_CaloIdVT_GsfTrkIdT_isLoaded;
  int      HLT_IsoTkMu24_;
  TBranch *HLT_IsoTkMu24_branch;
  bool     HLT_IsoTkMu24_isLoaded;
  int      HLT_IsoMu24_;
  TBranch *HLT_IsoMu24_branch;
  bool     HLT_IsoMu24_isLoaded;
  int      HLT_SingleMu50_;
  TBranch *HLT_SingleMu50_branch;
  bool     HLT_SingleMu50_isLoaded;
  int      HLT_SingleEl40_;
  TBranch *HLT_SingleEl40_branch;
  bool     HLT_SingleEl40_isLoaded;
  int      HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_;
  TBranch *HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_branch;
  bool     HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_isLoaded;
  int      HLT_Mu50_;
  TBranch *HLT_Mu50_branch;
  bool     HLT_Mu50_isLoaded;
  int      HLT_TkMu50_;
  TBranch *HLT_TkMu50_branch;
  bool     HLT_TkMu50_isLoaded;
  int      HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_;
  TBranch *HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_branch;
  bool     HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_isLoaded;
  int      HLT_AK8PFJet360_TrimMass30_;
  TBranch *HLT_AK8PFJet360_TrimMass30_branch;
  bool     HLT_AK8PFJet360_TrimMass30_isLoaded;
  int      HLT_PFHT800_;
  TBranch *HLT_PFHT800_branch;
  bool     HLT_PFHT800_isLoaded;
  int      HLT_PFHT900_;
  TBranch *HLT_PFHT900_branch;
  bool     HLT_PFHT900_isLoaded;
  int      HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_;
  TBranch *HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_branch;
  bool     HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_isLoaded;
  int      HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_;
  TBranch *HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_branch;
  bool     HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_isLoaded;
  int      HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20_;
  TBranch *HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20_branch;
  bool     HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20_isLoaded;
  int      pass_duplicate_se_sm_;
  TBranch *pass_duplicate_se_sm_branch;
  bool     pass_duplicate_se_sm_isLoaded;
  int      pass_duplicate_sm_se_;
  TBranch *pass_duplicate_sm_se_branch;
  bool     pass_duplicate_sm_se_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_recoil_p4_;
  TBranch *gen_recoil_p4_branch;
  bool     gen_recoil_p4_isLoaded;
  int      gen_recoil_id_;
  TBranch *gen_recoil_id_branch;
  bool     gen_recoil_id_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_higgs_p4_;
  TBranch *gen_higgs_p4_branch;
  bool     gen_higgs_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_whad_p4_;
  TBranch *gen_whad_p4_branch;
  bool     gen_whad_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_wlep_p4_;
  TBranch *gen_wlep_p4_branch;
  bool     gen_wlep_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_q0_p4_;
  TBranch *gen_q0_p4_branch;
  bool     gen_q0_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_q1_p4_;
  TBranch *gen_q1_p4_branch;
  bool     gen_q1_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_lep_p4_;
  TBranch *gen_lep_p4_branch;
  bool     gen_lep_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_neu_p4_;
  TBranch *gen_neu_p4_branch;
  bool     gen_neu_p4_isLoaded;
  int      gen_channel_;
  TBranch *gen_channel_branch;
  bool     gen_channel_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_wlep_rest_p4_;
  TBranch *gen_wlep_rest_p4_branch;
  bool     gen_wlep_rest_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_whad_rest_p4_;
  TBranch *gen_whad_rest_p4_branch;
  bool     gen_whad_rest_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_Vq0_p4_;
  TBranch *gen_Vq0_p4_branch;
  bool     gen_Vq0_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_Vq1_p4_;
  TBranch *gen_Vq1_p4_branch;
  bool     gen_Vq1_p4_isLoaded;
  int      gen_Vq0_id_;
  TBranch *gen_Vq0_id_branch;
  bool     gen_Vq0_id_isLoaded;
  int      gen_Vq1_id_;
  TBranch *gen_Vq1_id_branch;
  bool     gen_Vq1_id_isLoaded;
  int      gen_q0_id_;
  TBranch *gen_q0_id_branch;
  bool     gen_q0_id_isLoaded;
  int      gen_q1_id_;
  TBranch *gen_q1_id_branch;
  bool     gen_q1_id_isLoaded;
  int      gen_lep_id_;
  TBranch *gen_lep_id_branch;
  bool     gen_lep_id_isLoaded;
  int      gen_neu_id_;
  TBranch *gen_neu_id_branch;
  bool     gen_neu_id_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *J_p4_;
  TBranch *J_p4_branch;
  bool     J_p4_isLoaded;
  float    dphi_met_J_;
  TBranch *dphi_met_J_branch;
  bool     dphi_met_J_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Jmet_p4_;
  TBranch *Jmet_p4_branch;
  bool     Jmet_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *L_p4_;
  TBranch *L_p4_branch;
  bool     L_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Lmet_p4_;
  TBranch *Lmet_p4_branch;
  bool     Lmet_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *QQ_p4_;
  TBranch *QQ_p4_branch;
  bool     QQ_p4_isLoaded;
  float    dr_L_QQ_;
  TBranch *dr_L_QQ_branch;
  bool     dr_L_QQ_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *QQp_p4_;
  TBranch *QQp_p4_branch;
  bool     QQp_p4_isLoaded;
  float    dr_L_QQp_;
  TBranch *dr_L_QQp_branch;
  bool     dr_L_QQp_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *LQQ_p4_;
  TBranch *LQQ_p4_branch;
  bool     LQQ_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *LQQp_p4_;
  TBranch *LQQp_p4_branch;
  bool     LQQp_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *H_p4_;
  TBranch *H_p4_branch;
  bool     H_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Hp_p4_;
  TBranch *Hp_p4_branch;
  bool     Hp_p4_isLoaded;
  int      is_whad_lead_;
  TBranch *is_whad_lead_branch;
  bool     is_whad_lead_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_;
  TBranch *neu_p4_branch;
  bool     neu_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_sol1_;
  TBranch *neu_p4_sol1_branch;
  bool     neu_p4_sol1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_sol2_;
  TBranch *neu_p4_sol2_branch;
  bool     neu_p4_sol2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_invsol1_;
  TBranch *neu_p4_invsol1_branch;
  bool     neu_p4_invsol1_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_invsol2_;
  TBranch *neu_p4_invsol2_branch;
  bool     neu_p4_invsol2_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *V_p4_;
  TBranch *V_p4_branch;
  bool     V_p4_isLoaded;
  float    J_area_;
  TBranch *J_area_branch;
  bool     J_area_isLoaded;
  float    J_mass_;
  TBranch *J_mass_branch;
  bool     J_mass_isLoaded;
  float    J_softdropMass_;
  TBranch *J_softdropMass_branch;
  bool     J_softdropMass_isLoaded;
  float    J_nJettinessTau1_;
  TBranch *J_nJettinessTau1_branch;
  bool     J_nJettinessTau1_isLoaded;
  float    J_nJettinessTau2_;
  TBranch *J_nJettinessTau2_branch;
  bool     J_nJettinessTau2_isLoaded;
  float    J_nJettinessTau3_;
  TBranch *J_nJettinessTau3_branch;
  bool     J_nJettinessTau3_isLoaded;
  float    J_deep_rawdisc_h4q_;
  TBranch *J_deep_rawdisc_h4q_branch;
  bool     J_deep_rawdisc_h4q_isLoaded;
  float    J_deep_rawdisc_hbb_;
  TBranch *J_deep_rawdisc_hbb_branch;
  bool     J_deep_rawdisc_hbb_isLoaded;
  float    J_deep_rawdisc_qcd_;
  TBranch *J_deep_rawdisc_qcd_branch;
  bool     J_deep_rawdisc_qcd_isLoaded;
  float    J_deep_rawdisc_top_;
  TBranch *J_deep_rawdisc_top_branch;
  bool     J_deep_rawdisc_top_isLoaded;
  float    J_deep_rawdisc_w_;
  TBranch *J_deep_rawdisc_w_branch;
  bool     J_deep_rawdisc_w_isLoaded;
  float    J_deep_rawdisc_z_;
  TBranch *J_deep_rawdisc_z_branch;
  bool     J_deep_rawdisc_z_isLoaded;
  float    J_deep_rawdisc_zbb_;
  TBranch *J_deep_rawdisc_zbb_branch;
  bool     J_deep_rawdisc_zbb_isLoaded;
  float    J_deep_bindisc_h4q_;
  TBranch *J_deep_bindisc_h4q_branch;
  bool     J_deep_bindisc_h4q_isLoaded;
  float    J_deep_bindisc_hbb_;
  TBranch *J_deep_bindisc_hbb_branch;
  bool     J_deep_bindisc_hbb_isLoaded;
  float    J_deep_bindisc_top_;
  TBranch *J_deep_bindisc_top_branch;
  bool     J_deep_bindisc_top_isLoaded;
  float    J_deep_bindisc_w_;
  TBranch *J_deep_bindisc_w_branch;
  bool     J_deep_bindisc_w_isLoaded;
  float    J_deep_bindisc_z_;
  TBranch *J_deep_bindisc_z_branch;
  bool     J_deep_bindisc_z_isLoaded;
  float    J_deep_bindisc_zbb_;
  TBranch *J_deep_bindisc_zbb_branch;
  bool     J_deep_bindisc_zbb_isLoaded;
  float    J_softdropPuppiSubjet1_pt_;
  TBranch *J_softdropPuppiSubjet1_pt_branch;
  bool     J_softdropPuppiSubjet1_pt_isLoaded;
  float    J_softdropPuppiSubjet1_eta_;
  TBranch *J_softdropPuppiSubjet1_eta_branch;
  bool     J_softdropPuppiSubjet1_eta_isLoaded;
  float    J_softdropPuppiSubjet1_phi_;
  TBranch *J_softdropPuppiSubjet1_phi_branch;
  bool     J_softdropPuppiSubjet1_phi_isLoaded;
  float    J_softdropPuppiSubjet1_mass_;
  TBranch *J_softdropPuppiSubjet1_mass_branch;
  bool     J_softdropPuppiSubjet1_mass_isLoaded;
  float    J_softdropPuppiSubjet1_energy_;
  TBranch *J_softdropPuppiSubjet1_energy_branch;
  bool     J_softdropPuppiSubjet1_energy_isLoaded;
  float    J_softdropPuppiSubjet2_pt_;
  TBranch *J_softdropPuppiSubjet2_pt_branch;
  bool     J_softdropPuppiSubjet2_pt_isLoaded;
  float    J_softdropPuppiSubjet2_eta_;
  TBranch *J_softdropPuppiSubjet2_eta_branch;
  bool     J_softdropPuppiSubjet2_eta_isLoaded;
  float    J_softdropPuppiSubjet2_phi_;
  TBranch *J_softdropPuppiSubjet2_phi_branch;
  bool     J_softdropPuppiSubjet2_phi_isLoaded;
  float    J_softdropPuppiSubjet2_mass_;
  TBranch *J_softdropPuppiSubjet2_mass_branch;
  bool     J_softdropPuppiSubjet2_mass_isLoaded;
  float    J_softdropPuppiSubjet2_energy_;
  TBranch *J_softdropPuppiSubjet2_energy_branch;
  bool     J_softdropPuppiSubjet2_energy_isLoaded;
  int      J_npfcands_;
  TBranch *J_npfcands_branch;
  bool     J_npfcands_isLoaded;
  int      J_partonFlavour_;
  TBranch *J_partonFlavour_branch;
  bool     J_partonFlavour_isLoaded;
  int      L_id_;
  TBranch *L_id_branch;
  bool     L_id_isLoaded;
  int      L_idx_;
  TBranch *L_idx_branch;
  bool     L_idx_isLoaded;
  float    L_miniIsoEA_;
  TBranch *L_miniIsoEA_branch;
  bool     L_miniIsoEA_isLoaded;
  float    L_relIso03EA_;
  TBranch *L_relIso03EA_branch;
  bool     L_relIso03EA_isLoaded;
  float    L_relIso04DB_;
  TBranch *L_relIso04DB_branch;
  bool     L_relIso04DB_isLoaded;
  float    L_customrelIso005EA_;
  TBranch *L_customrelIso005EA_branch;
  bool     L_customrelIso005EA_isLoaded;
  float    L_customrelIso01EA_;
  TBranch *L_customrelIso01EA_branch;
  bool     L_customrelIso01EA_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *J_near_ak4jets_p4_;
  TBranch *J_near_ak4jets_p4_branch;
  bool     J_near_ak4jets_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *L_subjet1_p4_;
  TBranch *L_subjet1_p4_branch;
  bool     L_subjet1_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *L_subjet2_p4_;
  TBranch *L_subjet2_p4_branch;
  bool     L_subjet2_p4_isLoaded;
  float    L_subjet1_dr_;
  TBranch *L_subjet1_dr_branch;
  bool     L_subjet1_dr_isLoaded;
  float    L_subjet2_dr_;
  TBranch *L_subjet2_dr_branch;
  bool     L_subjet2_dr_isLoaded;
  float    L_subjet1_deg_;
  TBranch *L_subjet1_deg_branch;
  bool     L_subjet1_deg_isLoaded;
  float    L_subjet2_deg_;
  TBranch *L_subjet2_deg_branch;
  bool     L_subjet2_deg_isLoaded;
  float    V_area_;
  TBranch *V_area_branch;
  bool     V_area_isLoaded;
  float    V_mass_;
  TBranch *V_mass_branch;
  bool     V_mass_isLoaded;
  float    V_softdropMass_;
  TBranch *V_softdropMass_branch;
  bool     V_softdropMass_isLoaded;
  float    V_nJettinessTau1_;
  TBranch *V_nJettinessTau1_branch;
  bool     V_nJettinessTau1_isLoaded;
  float    V_nJettinessTau2_;
  TBranch *V_nJettinessTau2_branch;
  bool     V_nJettinessTau2_isLoaded;
  float    V_nJettinessTau3_;
  TBranch *V_nJettinessTau3_branch;
  bool     V_nJettinessTau3_isLoaded;
  float    V_deep_rawdisc_h4q_;
  TBranch *V_deep_rawdisc_h4q_branch;
  bool     V_deep_rawdisc_h4q_isLoaded;
  float    V_deep_rawdisc_hbb_;
  TBranch *V_deep_rawdisc_hbb_branch;
  bool     V_deep_rawdisc_hbb_isLoaded;
  float    V_deep_rawdisc_qcd_;
  TBranch *V_deep_rawdisc_qcd_branch;
  bool     V_deep_rawdisc_qcd_isLoaded;
  float    V_deep_rawdisc_top_;
  TBranch *V_deep_rawdisc_top_branch;
  bool     V_deep_rawdisc_top_isLoaded;
  float    V_deep_rawdisc_w_;
  TBranch *V_deep_rawdisc_w_branch;
  bool     V_deep_rawdisc_w_isLoaded;
  float    V_deep_rawdisc_z_;
  TBranch *V_deep_rawdisc_z_branch;
  bool     V_deep_rawdisc_z_isLoaded;
  float    V_deep_rawdisc_zbb_;
  TBranch *V_deep_rawdisc_zbb_branch;
  bool     V_deep_rawdisc_zbb_isLoaded;
  float    V_deep_bindisc_h4q_;
  TBranch *V_deep_bindisc_h4q_branch;
  bool     V_deep_bindisc_h4q_isLoaded;
  float    V_deep_bindisc_hbb_;
  TBranch *V_deep_bindisc_hbb_branch;
  bool     V_deep_bindisc_hbb_isLoaded;
  float    V_deep_bindisc_top_;
  TBranch *V_deep_bindisc_top_branch;
  bool     V_deep_bindisc_top_isLoaded;
  float    V_deep_bindisc_w_;
  TBranch *V_deep_bindisc_w_branch;
  bool     V_deep_bindisc_w_isLoaded;
  float    V_deep_bindisc_z_;
  TBranch *V_deep_bindisc_z_branch;
  bool     V_deep_bindisc_z_isLoaded;
  float    V_deep_bindisc_zbb_;
  TBranch *V_deep_bindisc_zbb_branch;
  bool     V_deep_bindisc_zbb_isLoaded;
  float    V_softdropPuppiSubjet1_pt_;
  TBranch *V_softdropPuppiSubjet1_pt_branch;
  bool     V_softdropPuppiSubjet1_pt_isLoaded;
  float    V_softdropPuppiSubjet1_eta_;
  TBranch *V_softdropPuppiSubjet1_eta_branch;
  bool     V_softdropPuppiSubjet1_eta_isLoaded;
  float    V_softdropPuppiSubjet1_phi_;
  TBranch *V_softdropPuppiSubjet1_phi_branch;
  bool     V_softdropPuppiSubjet1_phi_isLoaded;
  float    V_softdropPuppiSubjet1_mass_;
  TBranch *V_softdropPuppiSubjet1_mass_branch;
  bool     V_softdropPuppiSubjet1_mass_isLoaded;
  float    V_softdropPuppiSubjet1_energy_;
  TBranch *V_softdropPuppiSubjet1_energy_branch;
  bool     V_softdropPuppiSubjet1_energy_isLoaded;
  float    V_softdropPuppiSubjet2_pt_;
  TBranch *V_softdropPuppiSubjet2_pt_branch;
  bool     V_softdropPuppiSubjet2_pt_isLoaded;
  float    V_softdropPuppiSubjet2_eta_;
  TBranch *V_softdropPuppiSubjet2_eta_branch;
  bool     V_softdropPuppiSubjet2_eta_isLoaded;
  float    V_softdropPuppiSubjet2_phi_;
  TBranch *V_softdropPuppiSubjet2_phi_branch;
  bool     V_softdropPuppiSubjet2_phi_isLoaded;
  float    V_softdropPuppiSubjet2_mass_;
  TBranch *V_softdropPuppiSubjet2_mass_branch;
  bool     V_softdropPuppiSubjet2_mass_isLoaded;
  float    V_softdropPuppiSubjet2_energy_;
  TBranch *V_softdropPuppiSubjet2_energy_branch;
  bool     V_softdropPuppiSubjet2_energy_isLoaded;
  int      V_npfcands_;
  TBranch *V_npfcands_branch;
  bool     V_npfcands_isLoaded;
  int      V_partonFlavour_;
  TBranch *V_partonFlavour_branch;
  bool     V_partonFlavour_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Htag_J_p4_;
  TBranch *Htag_J_p4_branch;
  bool     Htag_J_p4_isLoaded;
  float    Htag_J_pt_;
  TBranch *Htag_J_pt_branch;
  bool     Htag_J_pt_isLoaded;
  float    Htag_J_eta_;
  TBranch *Htag_J_eta_branch;
  bool     Htag_J_eta_isLoaded;
  float    Htag_J_phi_;
  TBranch *Htag_J_phi_branch;
  bool     Htag_J_phi_isLoaded;
  float    Htag_J_mass_;
  TBranch *Htag_J_mass_branch;
  bool     Htag_J_mass_isLoaded;
  float    Htag_J_softdropMass_;
  TBranch *Htag_J_softdropMass_branch;
  bool     Htag_J_softdropMass_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Htag_L_p4_;
  TBranch *Htag_L_p4_branch;
  bool     Htag_L_p4_isLoaded;
  float    Htag_L_pt_;
  TBranch *Htag_L_pt_branch;
  bool     Htag_L_pt_isLoaded;
  float    Htag_L_eta_;
  TBranch *Htag_L_eta_branch;
  bool     Htag_L_eta_isLoaded;
  float    Htag_L_phi_;
  TBranch *Htag_L_phi_branch;
  bool     Htag_L_phi_isLoaded;
  float    Htag_L_dr_;
  TBranch *Htag_L_dr_branch;
  bool     Htag_L_dr_isLoaded;
  float    Htag_L_alpha_;
  TBranch *Htag_L_alpha_branch;
  bool     Htag_L_alpha_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *Htag_pf_p4_;
  TBranch *Htag_pf_p4_branch;
  bool     Htag_pf_p4_isLoaded;
  vector<float> *Htag_pf_pt_;
  TBranch *Htag_pf_pt_branch;
  bool     Htag_pf_pt_isLoaded;
  vector<float> *Htag_pf_eta_;
  TBranch *Htag_pf_eta_branch;
  bool     Htag_pf_eta_isLoaded;
  vector<float> *Htag_pf_phi_;
  TBranch *Htag_pf_phi_branch;
  bool     Htag_pf_phi_isLoaded;
  vector<int> *Htag_pf_id_;
  TBranch *Htag_pf_id_branch;
  bool     Htag_pf_id_isLoaded;
  vector<float> *Htag_pf_dr_;
  TBranch *Htag_pf_dr_branch;
  bool     Htag_pf_dr_isLoaded;
  vector<float> *Htag_pf_alpha_;
  TBranch *Htag_pf_alpha_branch;
  bool     Htag_pf_alpha_isLoaded;
  vector<float> *Htag_pf_puppi_wgt_;
  TBranch *Htag_pf_puppi_wgt_branch;
  bool     Htag_pf_puppi_wgt_isLoaded;
  vector<float> *Htag_pf_ptfrac_;
  TBranch *Htag_pf_ptfrac_branch;
  bool     Htag_pf_ptfrac_isLoaded;
  vector<float> *Htag_pf_ptrel_;
  TBranch *Htag_pf_ptrel_branch;
  bool     Htag_pf_ptrel_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *Htag_pf_nolep_p4_;
  TBranch *Htag_pf_nolep_p4_branch;
  bool     Htag_pf_nolep_p4_isLoaded;
  vector<float> *Htag_pf_nolep_pt_;
  TBranch *Htag_pf_nolep_pt_branch;
  bool     Htag_pf_nolep_pt_isLoaded;
  vector<float> *Htag_pf_nolep_eta_;
  TBranch *Htag_pf_nolep_eta_branch;
  bool     Htag_pf_nolep_eta_isLoaded;
  vector<float> *Htag_pf_nolep_phi_;
  TBranch *Htag_pf_nolep_phi_branch;
  bool     Htag_pf_nolep_phi_isLoaded;
  vector<int> *Htag_pf_nolep_id_;
  TBranch *Htag_pf_nolep_id_branch;
  bool     Htag_pf_nolep_id_isLoaded;
  vector<float> *Htag_pf_nolep_dr_;
  TBranch *Htag_pf_nolep_dr_branch;
  bool     Htag_pf_nolep_dr_isLoaded;
  vector<float> *Htag_pf_nolep_alpha_;
  TBranch *Htag_pf_nolep_alpha_branch;
  bool     Htag_pf_nolep_alpha_isLoaded;
  vector<float> *Htag_pf_nolep_puppi_wgt_;
  TBranch *Htag_pf_nolep_puppi_wgt_branch;
  bool     Htag_pf_nolep_puppi_wgt_isLoaded;
  vector<float> *Htag_pf_nolep_ptfrac_;
  TBranch *Htag_pf_nolep_ptfrac_branch;
  bool     Htag_pf_nolep_ptfrac_isLoaded;
  vector<float> *Htag_pf_nolep_ptrel_;
  TBranch *Htag_pf_nolep_ptrel_branch;
  bool     Htag_pf_nolep_ptrel_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > *Htag_ak4_p4_;
  TBranch *Htag_ak4_p4_branch;
  bool     Htag_ak4_p4_isLoaded;
  vector<float> *Htag_ak4_pt_;
  TBranch *Htag_ak4_pt_branch;
  bool     Htag_ak4_pt_isLoaded;
  vector<float> *Htag_ak4_eta_;
  TBranch *Htag_ak4_eta_branch;
  bool     Htag_ak4_eta_isLoaded;
  vector<float> *Htag_ak4_phi_;
  TBranch *Htag_ak4_phi_branch;
  bool     Htag_ak4_phi_isLoaded;
  vector<float> *Htag_ak4_dr_;
  TBranch *Htag_ak4_dr_branch;
  bool     Htag_ak4_dr_isLoaded;
  vector<float> *Htag_ak4_alpha_;
  TBranch *Htag_ak4_alpha_branch;
  bool     Htag_ak4_alpha_isLoaded;
  vector<float> *Htag_ak4_L_dr_;
  TBranch *Htag_ak4_L_dr_branch;
  bool     Htag_ak4_L_dr_isLoaded;
  vector<float> *Htag_ak4_L_dpt_;
  TBranch *Htag_ak4_L_dpt_branch;
  bool     Htag_ak4_L_dpt_isLoaded;
  vector<int> *Htag_fromPV_;
  TBranch *Htag_fromPV_branch;
  bool     Htag_fromPV_isLoaded;
  vector<int> *Htag_pv_quality_;
  TBranch *Htag_pv_quality_branch;
  bool     Htag_pv_quality_isLoaded;
  int      Htag_leppffound_;
  TBranch *Htag_leppffound_branch;
  bool     Htag_leppffound_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Htag_subjet1_p4_;
  TBranch *Htag_subjet1_p4_branch;
  bool     Htag_subjet1_p4_isLoaded;
  float    Htag_subjet1_pt_;
  TBranch *Htag_subjet1_pt_branch;
  bool     Htag_subjet1_pt_isLoaded;
  float    Htag_subjet1_eta_;
  TBranch *Htag_subjet1_eta_branch;
  bool     Htag_subjet1_eta_isLoaded;
  float    Htag_subjet1_phi_;
  TBranch *Htag_subjet1_phi_branch;
  bool     Htag_subjet1_phi_isLoaded;
  float    Htag_subjet1_dr_;
  TBranch *Htag_subjet1_dr_branch;
  bool     Htag_subjet1_dr_isLoaded;
  float    Htag_subjet1_alpha_;
  TBranch *Htag_subjet1_alpha_branch;
  bool     Htag_subjet1_alpha_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Htag_subjet2_p4_;
  TBranch *Htag_subjet2_p4_branch;
  bool     Htag_subjet2_p4_isLoaded;
  float    Htag_subjet2_pt_;
  TBranch *Htag_subjet2_pt_branch;
  bool     Htag_subjet2_pt_isLoaded;
  float    Htag_subjet2_eta_;
  TBranch *Htag_subjet2_eta_branch;
  bool     Htag_subjet2_eta_isLoaded;
  float    Htag_subjet2_phi_;
  TBranch *Htag_subjet2_phi_branch;
  bool     Htag_subjet2_phi_isLoaded;
  float    Htag_subjet2_dr_;
  TBranch *Htag_subjet2_dr_branch;
  bool     Htag_subjet2_dr_isLoaded;
  float    Htag_subjet2_alpha_;
  TBranch *Htag_subjet2_alpha_branch;
  bool     Htag_subjet2_alpha_isLoaded;
  float    Htag_gen_higgs_dr_;
  TBranch *Htag_gen_higgs_dr_branch;
  bool     Htag_gen_higgs_dr_isLoaded;
  float    Htag_gen_higgs_alpha_;
  TBranch *Htag_gen_higgs_alpha_branch;
  bool     Htag_gen_higgs_alpha_isLoaded;
  float    Htag_gen_whad_dr_;
  TBranch *Htag_gen_whad_dr_branch;
  bool     Htag_gen_whad_dr_isLoaded;
  float    Htag_gen_whad_alpha_;
  TBranch *Htag_gen_whad_alpha_branch;
  bool     Htag_gen_whad_alpha_isLoaded;
  float    Htag_gen_wlep_dr_;
  TBranch *Htag_gen_wlep_dr_branch;
  bool     Htag_gen_wlep_dr_isLoaded;
  float    Htag_gen_wlep_alpha_;
  TBranch *Htag_gen_wlep_alpha_branch;
  bool     Htag_gen_wlep_alpha_isLoaded;
  float    Htag_gen_q0_dr_;
  TBranch *Htag_gen_q0_dr_branch;
  bool     Htag_gen_q0_dr_isLoaded;
  float    Htag_gen_q0_alpha_;
  TBranch *Htag_gen_q0_alpha_branch;
  bool     Htag_gen_q0_alpha_isLoaded;
  float    Htag_gen_q1_dr_;
  TBranch *Htag_gen_q1_dr_branch;
  bool     Htag_gen_q1_dr_isLoaded;
  float    Htag_gen_q1_alpha_;
  TBranch *Htag_gen_q1_alpha_branch;
  bool     Htag_gen_q1_alpha_isLoaded;
  float    Htag_gen_lep_dr_;
  TBranch *Htag_gen_lep_dr_branch;
  bool     Htag_gen_lep_dr_isLoaded;
  float    Htag_gen_lep_alpha_;
  TBranch *Htag_gen_lep_alpha_branch;
  bool     Htag_gen_lep_alpha_isLoaded;
  float    Htag_gen_neu_dr_;
  TBranch *Htag_gen_neu_dr_branch;
  bool     Htag_gen_neu_dr_isLoaded;
  float    Htag_gen_neu_alpha_;
  TBranch *Htag_gen_neu_alpha_branch;
  bool     Htag_gen_neu_alpha_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Recoil_p4_;
  TBranch *Recoil_p4_branch;
  bool     Recoil_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Recoil_leadak4_p4_;
  TBranch *Recoil_leadak4_p4_branch;
  bool     Recoil_leadak4_p4_isLoaded;
  int      Recoil_leadak4_npfcands_;
  TBranch *Recoil_leadak4_npfcands_branch;
  bool     Recoil_leadak4_npfcands_isLoaded;
  int      Recoil_leadak4_chargedHadronMultiplicity_;
  TBranch *Recoil_leadak4_chargedHadronMultiplicity_branch;
  bool     Recoil_leadak4_chargedHadronMultiplicity_isLoaded;
  int      Recoil_leadak4_chargedMultiplicity_;
  TBranch *Recoil_leadak4_chargedMultiplicity_branch;
  bool     Recoil_leadak4_chargedMultiplicity_isLoaded;
  int      Recoil_leadak4_electronMultiplicity_;
  TBranch *Recoil_leadak4_electronMultiplicity_branch;
  bool     Recoil_leadak4_electronMultiplicity_isLoaded;
  int      Recoil_leadak4_muonMultiplicity_;
  TBranch *Recoil_leadak4_muonMultiplicity_branch;
  bool     Recoil_leadak4_muonMultiplicity_isLoaded;
  int      Recoil_leadak4_neutralHadronMultiplicity_;
  TBranch *Recoil_leadak4_neutralHadronMultiplicity_branch;
  bool     Recoil_leadak4_neutralHadronMultiplicity_isLoaded;
  int      Recoil_leadak4_neutralMultiplicity_;
  TBranch *Recoil_leadak4_neutralMultiplicity_branch;
  bool     Recoil_leadak4_neutralMultiplicity_isLoaded;
  int      Recoil_leadak4_photonMultiplicity_;
  TBranch *Recoil_leadak4_photonMultiplicity_branch;
  bool     Recoil_leadak4_photonMultiplicity_isLoaded;
  int      Recoil_leadak4_totalMultiplicity_;
  TBranch *Recoil_leadak4_totalMultiplicity_branch;
  bool     Recoil_leadak4_totalMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_chargedHadronMultiplicity_;
  TBranch *Recoil_leadak4_puppi_chargedHadronMultiplicity_branch;
  bool     Recoil_leadak4_puppi_chargedHadronMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_chargedMultiplicity_;
  TBranch *Recoil_leadak4_puppi_chargedMultiplicity_branch;
  bool     Recoil_leadak4_puppi_chargedMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_electronMultiplicity_;
  TBranch *Recoil_leadak4_puppi_electronMultiplicity_branch;
  bool     Recoil_leadak4_puppi_electronMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_muonMultiplicity_;
  TBranch *Recoil_leadak4_puppi_muonMultiplicity_branch;
  bool     Recoil_leadak4_puppi_muonMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_neutralHadronMultiplicity_;
  TBranch *Recoil_leadak4_puppi_neutralHadronMultiplicity_branch;
  bool     Recoil_leadak4_puppi_neutralHadronMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_neutralMultiplicity_;
  TBranch *Recoil_leadak4_puppi_neutralMultiplicity_branch;
  bool     Recoil_leadak4_puppi_neutralMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_photonMultiplicity_;
  TBranch *Recoil_leadak4_puppi_photonMultiplicity_branch;
  bool     Recoil_leadak4_puppi_photonMultiplicity_isLoaded;
  int      Recoil_leadak4_puppi_totalMultiplicity_;
  TBranch *Recoil_leadak4_puppi_totalMultiplicity_branch;
  bool     Recoil_leadak4_puppi_totalMultiplicity_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Recoil_allj_1_4_p4_;
  TBranch *Recoil_allj_1_4_p4_branch;
  bool     Recoil_allj_1_4_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Recoil_allj_1_4_leadak4_p4_;
  TBranch *Recoil_allj_1_4_leadak4_p4_branch;
  bool     Recoil_allj_1_4_leadak4_p4_isLoaded;
  int      Recoil_allj_1_4_leadak4_npfcands_;
  TBranch *Recoil_allj_1_4_leadak4_npfcands_branch;
  bool     Recoil_allj_1_4_leadak4_npfcands_isLoaded;
  int      Recoil_allj_1_4_leadak4_chargedHadronMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_chargedHadronMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_chargedHadronMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_chargedMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_chargedMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_chargedMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_electronMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_electronMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_electronMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_muonMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_muonMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_muonMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_neutralHadronMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_neutralHadronMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_neutralHadronMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_neutralMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_neutralMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_neutralMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_photonMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_photonMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_photonMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_totalMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_totalMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_totalMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_chargedHadronMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_chargedHadronMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_chargedHadronMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_chargedMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_chargedMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_chargedMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_electronMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_electronMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_electronMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_muonMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_muonMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_muonMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_neutralHadronMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_neutralHadronMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_neutralHadronMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_neutralMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_neutralMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_neutralMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_photonMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_photonMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_photonMultiplicity_isLoaded;
  int      Recoil_allj_1_4_leadak4_puppi_totalMultiplicity_;
  TBranch *Recoil_allj_1_4_leadak4_puppi_totalMultiplicity_branch;
  bool     Recoil_allj_1_4_leadak4_puppi_totalMultiplicity_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Recoil_j_3_4_p4_;
  TBranch *Recoil_j_3_4_p4_branch;
  bool     Recoil_j_3_4_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Recoil_j_3_4_leadak4_p4_;
  TBranch *Recoil_j_3_4_leadak4_p4_branch;
  bool     Recoil_j_3_4_leadak4_p4_isLoaded;
  int      Recoil_j_3_4_leadak4_npfcands_;
  TBranch *Recoil_j_3_4_leadak4_npfcands_branch;
  bool     Recoil_j_3_4_leadak4_npfcands_isLoaded;
  int      Recoil_j_3_4_leadak4_chargedHadronMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_chargedHadronMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_chargedHadronMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_chargedMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_chargedMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_chargedMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_electronMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_electronMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_electronMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_muonMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_muonMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_muonMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_neutralHadronMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_neutralHadronMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_neutralHadronMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_neutralMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_neutralMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_neutralMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_photonMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_photonMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_photonMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_totalMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_totalMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_totalMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_chargedHadronMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_chargedHadronMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_chargedHadronMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_chargedMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_chargedMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_chargedMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_electronMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_electronMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_electronMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_muonMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_muonMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_muonMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_neutralHadronMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_neutralHadronMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_neutralHadronMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_neutralMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_neutralMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_neutralMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_photonMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_photonMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_photonMultiplicity_isLoaded;
  int      Recoil_j_3_4_leadak4_puppi_totalMultiplicity_;
  TBranch *Recoil_j_3_4_leadak4_puppi_totalMultiplicity_branch;
  bool     Recoil_j_3_4_leadak4_puppi_totalMultiplicity_isLoaded;
  float    gen_ht_;
  TBranch *gen_ht_branch;
  bool     gen_ht_isLoaded;
  float    nvtx_;
  TBranch *nvtx_branch;
  bool     nvtx_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &genps_weight();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const int &nrecolep();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const int &nak8jets();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
  const int &nj();
  const int &nb();
  const int &nbmed();
  const int &nbtight();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &alljets_p4();
  const vector<int> &jets_idx();
  const vector<int> &alljets_idx();
  const float &met_pt();
  const float &met_phi();
  const float &met_up_pt();
  const float &met_up_phi();
  const float &met_dn_pt();
  const float &met_dn_phi();
  const float &met_gen_pt();
  const float &met_gen_phi();
  const int &HLT_Ele27_WPLoose_Gsf();
  const int &HLT_Ele30_WPLoose_Gsf();
  const int &HLT_Ele45_WPLoose_Gsf();
  const int &HLT_Ele105_CaloIdVT_GsfTrkIdT();
  const int &HLT_Ele115_CaloIdVT_GsfTrkIdT();
  const int &HLT_IsoTkMu24();
  const int &HLT_IsoMu24();
  const int &HLT_SingleMu50();
  const int &HLT_SingleEl40();
  const int &HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165();
  const int &HLT_Mu50();
  const int &HLT_TkMu50();
  const int &HLT_AK8PFHT700_TrimR0p1PT0p03Mass50();
  const int &HLT_AK8PFJet360_TrimMass30();
  const int &HLT_PFHT800();
  const int &HLT_PFHT900();
  const int &HLT_PFHT650_WideJetMJJ900DEtaJJ1p5();
  const int &HLT_PFHT650_WideJetMJJ950DEtaJJ1p5();
  const int &HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20();
  const int &pass_duplicate_se_sm();
  const int &pass_duplicate_sm_se();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_recoil_p4();
  const int &gen_recoil_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_higgs_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_whad_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_wlep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_lep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_neu_p4();
  const int &gen_channel();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_wlep_rest_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_whad_rest_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq1_p4();
  const int &gen_Vq0_id();
  const int &gen_Vq1_id();
  const int &gen_q0_id();
  const int &gen_q1_id();
  const int &gen_lep_id();
  const int &gen_neu_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &J_p4();
  const float &dphi_met_J();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Jmet_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Lmet_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &QQ_p4();
  const float &dr_L_QQ();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &QQp_p4();
  const float &dr_L_QQp();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LQQ_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LQQp_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &H_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Hp_p4();
  const int &is_whad_lead();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_sol1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_sol2();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_invsol1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_invsol2();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &V_p4();
  const float &J_area();
  const float &J_mass();
  const float &J_softdropMass();
  const float &J_nJettinessTau1();
  const float &J_nJettinessTau2();
  const float &J_nJettinessTau3();
  const float &J_deep_rawdisc_h4q();
  const float &J_deep_rawdisc_hbb();
  const float &J_deep_rawdisc_qcd();
  const float &J_deep_rawdisc_top();
  const float &J_deep_rawdisc_w();
  const float &J_deep_rawdisc_z();
  const float &J_deep_rawdisc_zbb();
  const float &J_deep_bindisc_h4q();
  const float &J_deep_bindisc_hbb();
  const float &J_deep_bindisc_top();
  const float &J_deep_bindisc_w();
  const float &J_deep_bindisc_z();
  const float &J_deep_bindisc_zbb();
  const float &J_softdropPuppiSubjet1_pt();
  const float &J_softdropPuppiSubjet1_eta();
  const float &J_softdropPuppiSubjet1_phi();
  const float &J_softdropPuppiSubjet1_mass();
  const float &J_softdropPuppiSubjet1_energy();
  const float &J_softdropPuppiSubjet2_pt();
  const float &J_softdropPuppiSubjet2_eta();
  const float &J_softdropPuppiSubjet2_phi();
  const float &J_softdropPuppiSubjet2_mass();
  const float &J_softdropPuppiSubjet2_energy();
  const int &J_npfcands();
  const int &J_partonFlavour();
  const int &L_id();
  const int &L_idx();
  const float &L_miniIsoEA();
  const float &L_relIso03EA();
  const float &L_relIso04DB();
  const float &L_customrelIso005EA();
  const float &L_customrelIso01EA();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &J_near_ak4jets_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_subjet1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_subjet2_p4();
  const float &L_subjet1_dr();
  const float &L_subjet2_dr();
  const float &L_subjet1_deg();
  const float &L_subjet2_deg();
  const float &V_area();
  const float &V_mass();
  const float &V_softdropMass();
  const float &V_nJettinessTau1();
  const float &V_nJettinessTau2();
  const float &V_nJettinessTau3();
  const float &V_deep_rawdisc_h4q();
  const float &V_deep_rawdisc_hbb();
  const float &V_deep_rawdisc_qcd();
  const float &V_deep_rawdisc_top();
  const float &V_deep_rawdisc_w();
  const float &V_deep_rawdisc_z();
  const float &V_deep_rawdisc_zbb();
  const float &V_deep_bindisc_h4q();
  const float &V_deep_bindisc_hbb();
  const float &V_deep_bindisc_top();
  const float &V_deep_bindisc_w();
  const float &V_deep_bindisc_z();
  const float &V_deep_bindisc_zbb();
  const float &V_softdropPuppiSubjet1_pt();
  const float &V_softdropPuppiSubjet1_eta();
  const float &V_softdropPuppiSubjet1_phi();
  const float &V_softdropPuppiSubjet1_mass();
  const float &V_softdropPuppiSubjet1_energy();
  const float &V_softdropPuppiSubjet2_pt();
  const float &V_softdropPuppiSubjet2_eta();
  const float &V_softdropPuppiSubjet2_phi();
  const float &V_softdropPuppiSubjet2_mass();
  const float &V_softdropPuppiSubjet2_energy();
  const int &V_npfcands();
  const int &V_partonFlavour();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_J_p4();
  const float &Htag_J_pt();
  const float &Htag_J_eta();
  const float &Htag_J_phi();
  const float &Htag_J_mass();
  const float &Htag_J_softdropMass();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_L_p4();
  const float &Htag_L_pt();
  const float &Htag_L_eta();
  const float &Htag_L_phi();
  const float &Htag_L_dr();
  const float &Htag_L_alpha();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &Htag_pf_p4();
  const vector<float> &Htag_pf_pt();
  const vector<float> &Htag_pf_eta();
  const vector<float> &Htag_pf_phi();
  const vector<int> &Htag_pf_id();
  const vector<float> &Htag_pf_dr();
  const vector<float> &Htag_pf_alpha();
  const vector<float> &Htag_pf_puppi_wgt();
  const vector<float> &Htag_pf_ptfrac();
  const vector<float> &Htag_pf_ptrel();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &Htag_pf_nolep_p4();
  const vector<float> &Htag_pf_nolep_pt();
  const vector<float> &Htag_pf_nolep_eta();
  const vector<float> &Htag_pf_nolep_phi();
  const vector<int> &Htag_pf_nolep_id();
  const vector<float> &Htag_pf_nolep_dr();
  const vector<float> &Htag_pf_nolep_alpha();
  const vector<float> &Htag_pf_nolep_puppi_wgt();
  const vector<float> &Htag_pf_nolep_ptfrac();
  const vector<float> &Htag_pf_nolep_ptrel();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &Htag_ak4_p4();
  const vector<float> &Htag_ak4_pt();
  const vector<float> &Htag_ak4_eta();
  const vector<float> &Htag_ak4_phi();
  const vector<float> &Htag_ak4_dr();
  const vector<float> &Htag_ak4_alpha();
  const vector<float> &Htag_ak4_L_dr();
  const vector<float> &Htag_ak4_L_dpt();
  const vector<int> &Htag_fromPV();
  const vector<int> &Htag_pv_quality();
  const int &Htag_leppffound();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_subjet1_p4();
  const float &Htag_subjet1_pt();
  const float &Htag_subjet1_eta();
  const float &Htag_subjet1_phi();
  const float &Htag_subjet1_dr();
  const float &Htag_subjet1_alpha();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_subjet2_p4();
  const float &Htag_subjet2_pt();
  const float &Htag_subjet2_eta();
  const float &Htag_subjet2_phi();
  const float &Htag_subjet2_dr();
  const float &Htag_subjet2_alpha();
  const float &Htag_gen_higgs_dr();
  const float &Htag_gen_higgs_alpha();
  const float &Htag_gen_whad_dr();
  const float &Htag_gen_whad_alpha();
  const float &Htag_gen_wlep_dr();
  const float &Htag_gen_wlep_alpha();
  const float &Htag_gen_q0_dr();
  const float &Htag_gen_q0_alpha();
  const float &Htag_gen_q1_dr();
  const float &Htag_gen_q1_alpha();
  const float &Htag_gen_lep_dr();
  const float &Htag_gen_lep_alpha();
  const float &Htag_gen_neu_dr();
  const float &Htag_gen_neu_alpha();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_leadak4_p4();
  const int &Recoil_leadak4_npfcands();
  const int &Recoil_leadak4_chargedHadronMultiplicity();
  const int &Recoil_leadak4_chargedMultiplicity();
  const int &Recoil_leadak4_electronMultiplicity();
  const int &Recoil_leadak4_muonMultiplicity();
  const int &Recoil_leadak4_neutralHadronMultiplicity();
  const int &Recoil_leadak4_neutralMultiplicity();
  const int &Recoil_leadak4_photonMultiplicity();
  const int &Recoil_leadak4_totalMultiplicity();
  const int &Recoil_leadak4_puppi_chargedHadronMultiplicity();
  const int &Recoil_leadak4_puppi_chargedMultiplicity();
  const int &Recoil_leadak4_puppi_electronMultiplicity();
  const int &Recoil_leadak4_puppi_muonMultiplicity();
  const int &Recoil_leadak4_puppi_neutralHadronMultiplicity();
  const int &Recoil_leadak4_puppi_neutralMultiplicity();
  const int &Recoil_leadak4_puppi_photonMultiplicity();
  const int &Recoil_leadak4_puppi_totalMultiplicity();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_allj_1_4_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_allj_1_4_leadak4_p4();
  const int &Recoil_allj_1_4_leadak4_npfcands();
  const int &Recoil_allj_1_4_leadak4_chargedHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_chargedMultiplicity();
  const int &Recoil_allj_1_4_leadak4_electronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_muonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_neutralHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_neutralMultiplicity();
  const int &Recoil_allj_1_4_leadak4_photonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_totalMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_chargedHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_chargedMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_electronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_muonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_neutralHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_neutralMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_photonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_totalMultiplicity();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_j_3_4_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_j_3_4_leadak4_p4();
  const int &Recoil_j_3_4_leadak4_npfcands();
  const int &Recoil_j_3_4_leadak4_chargedHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_chargedMultiplicity();
  const int &Recoil_j_3_4_leadak4_electronMultiplicity();
  const int &Recoil_j_3_4_leadak4_muonMultiplicity();
  const int &Recoil_j_3_4_leadak4_neutralHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_neutralMultiplicity();
  const int &Recoil_j_3_4_leadak4_photonMultiplicity();
  const int &Recoil_j_3_4_leadak4_totalMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_chargedHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_chargedMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_electronMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_muonMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_neutralHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_neutralMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_photonMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_totalMultiplicity();
  const float &gen_ht();
  const float &nvtx();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern hwwtree hww;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &genps_weight();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const int &nrecolep();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &lep_p4();
  const int &nak8jets();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &ak8jets_p4();
  const int &nj();
  const int &nb();
  const int &nbmed();
  const int &nbtight();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &jets_p4();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &alljets_p4();
  const vector<int> &jets_idx();
  const vector<int> &alljets_idx();
  const float &met_pt();
  const float &met_phi();
  const float &met_up_pt();
  const float &met_up_phi();
  const float &met_dn_pt();
  const float &met_dn_phi();
  const float &met_gen_pt();
  const float &met_gen_phi();
  const int &HLT_Ele27_WPLoose_Gsf();
  const int &HLT_Ele30_WPLoose_Gsf();
  const int &HLT_Ele45_WPLoose_Gsf();
  const int &HLT_Ele105_CaloIdVT_GsfTrkIdT();
  const int &HLT_Ele115_CaloIdVT_GsfTrkIdT();
  const int &HLT_IsoTkMu24();
  const int &HLT_IsoMu24();
  const int &HLT_SingleMu50();
  const int &HLT_SingleEl40();
  const int &HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165();
  const int &HLT_Mu50();
  const int &HLT_TkMu50();
  const int &HLT_AK8PFHT700_TrimR0p1PT0p03Mass50();
  const int &HLT_AK8PFJet360_TrimMass30();
  const int &HLT_PFHT800();
  const int &HLT_PFHT900();
  const int &HLT_PFHT650_WideJetMJJ900DEtaJJ1p5();
  const int &HLT_PFHT650_WideJetMJJ950DEtaJJ1p5();
  const int &HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20();
  const int &pass_duplicate_se_sm();
  const int &pass_duplicate_sm_se();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_recoil_p4();
  const int &gen_recoil_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_higgs_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_whad_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_wlep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_lep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_neu_p4();
  const int &gen_channel();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_wlep_rest_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_whad_rest_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq1_p4();
  const int &gen_Vq0_id();
  const int &gen_Vq1_id();
  const int &gen_q0_id();
  const int &gen_q1_id();
  const int &gen_lep_id();
  const int &gen_neu_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &J_p4();
  const float &dphi_met_J();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Jmet_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Lmet_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &QQ_p4();
  const float &dr_L_QQ();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &QQp_p4();
  const float &dr_L_QQp();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LQQ_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LQQp_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &H_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Hp_p4();
  const int &is_whad_lead();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_sol1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_sol2();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_invsol1();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_invsol2();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &V_p4();
  const float &J_area();
  const float &J_mass();
  const float &J_softdropMass();
  const float &J_nJettinessTau1();
  const float &J_nJettinessTau2();
  const float &J_nJettinessTau3();
  const float &J_deep_rawdisc_h4q();
  const float &J_deep_rawdisc_hbb();
  const float &J_deep_rawdisc_qcd();
  const float &J_deep_rawdisc_top();
  const float &J_deep_rawdisc_w();
  const float &J_deep_rawdisc_z();
  const float &J_deep_rawdisc_zbb();
  const float &J_deep_bindisc_h4q();
  const float &J_deep_bindisc_hbb();
  const float &J_deep_bindisc_top();
  const float &J_deep_bindisc_w();
  const float &J_deep_bindisc_z();
  const float &J_deep_bindisc_zbb();
  const float &J_softdropPuppiSubjet1_pt();
  const float &J_softdropPuppiSubjet1_eta();
  const float &J_softdropPuppiSubjet1_phi();
  const float &J_softdropPuppiSubjet1_mass();
  const float &J_softdropPuppiSubjet1_energy();
  const float &J_softdropPuppiSubjet2_pt();
  const float &J_softdropPuppiSubjet2_eta();
  const float &J_softdropPuppiSubjet2_phi();
  const float &J_softdropPuppiSubjet2_mass();
  const float &J_softdropPuppiSubjet2_energy();
  const int &J_npfcands();
  const int &J_partonFlavour();
  const int &L_id();
  const int &L_idx();
  const float &L_miniIsoEA();
  const float &L_relIso03EA();
  const float &L_relIso04DB();
  const float &L_customrelIso005EA();
  const float &L_customrelIso01EA();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &J_near_ak4jets_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_subjet1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_subjet2_p4();
  const float &L_subjet1_dr();
  const float &L_subjet2_dr();
  const float &L_subjet1_deg();
  const float &L_subjet2_deg();
  const float &V_area();
  const float &V_mass();
  const float &V_softdropMass();
  const float &V_nJettinessTau1();
  const float &V_nJettinessTau2();
  const float &V_nJettinessTau3();
  const float &V_deep_rawdisc_h4q();
  const float &V_deep_rawdisc_hbb();
  const float &V_deep_rawdisc_qcd();
  const float &V_deep_rawdisc_top();
  const float &V_deep_rawdisc_w();
  const float &V_deep_rawdisc_z();
  const float &V_deep_rawdisc_zbb();
  const float &V_deep_bindisc_h4q();
  const float &V_deep_bindisc_hbb();
  const float &V_deep_bindisc_top();
  const float &V_deep_bindisc_w();
  const float &V_deep_bindisc_z();
  const float &V_deep_bindisc_zbb();
  const float &V_softdropPuppiSubjet1_pt();
  const float &V_softdropPuppiSubjet1_eta();
  const float &V_softdropPuppiSubjet1_phi();
  const float &V_softdropPuppiSubjet1_mass();
  const float &V_softdropPuppiSubjet1_energy();
  const float &V_softdropPuppiSubjet2_pt();
  const float &V_softdropPuppiSubjet2_eta();
  const float &V_softdropPuppiSubjet2_phi();
  const float &V_softdropPuppiSubjet2_mass();
  const float &V_softdropPuppiSubjet2_energy();
  const int &V_npfcands();
  const int &V_partonFlavour();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_J_p4();
  const float &Htag_J_pt();
  const float &Htag_J_eta();
  const float &Htag_J_phi();
  const float &Htag_J_mass();
  const float &Htag_J_softdropMass();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_L_p4();
  const float &Htag_L_pt();
  const float &Htag_L_eta();
  const float &Htag_L_phi();
  const float &Htag_L_dr();
  const float &Htag_L_alpha();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &Htag_pf_p4();
  const vector<float> &Htag_pf_pt();
  const vector<float> &Htag_pf_eta();
  const vector<float> &Htag_pf_phi();
  const vector<int> &Htag_pf_id();
  const vector<float> &Htag_pf_dr();
  const vector<float> &Htag_pf_alpha();
  const vector<float> &Htag_pf_puppi_wgt();
  const vector<float> &Htag_pf_ptfrac();
  const vector<float> &Htag_pf_ptrel();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &Htag_pf_nolep_p4();
  const vector<float> &Htag_pf_nolep_pt();
  const vector<float> &Htag_pf_nolep_eta();
  const vector<float> &Htag_pf_nolep_phi();
  const vector<int> &Htag_pf_nolep_id();
  const vector<float> &Htag_pf_nolep_dr();
  const vector<float> &Htag_pf_nolep_alpha();
  const vector<float> &Htag_pf_nolep_puppi_wgt();
  const vector<float> &Htag_pf_nolep_ptfrac();
  const vector<float> &Htag_pf_nolep_ptrel();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &Htag_ak4_p4();
  const vector<float> &Htag_ak4_pt();
  const vector<float> &Htag_ak4_eta();
  const vector<float> &Htag_ak4_phi();
  const vector<float> &Htag_ak4_dr();
  const vector<float> &Htag_ak4_alpha();
  const vector<float> &Htag_ak4_L_dr();
  const vector<float> &Htag_ak4_L_dpt();
  const vector<int> &Htag_fromPV();
  const vector<int> &Htag_pv_quality();
  const int &Htag_leppffound();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_subjet1_p4();
  const float &Htag_subjet1_pt();
  const float &Htag_subjet1_eta();
  const float &Htag_subjet1_phi();
  const float &Htag_subjet1_dr();
  const float &Htag_subjet1_alpha();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Htag_subjet2_p4();
  const float &Htag_subjet2_pt();
  const float &Htag_subjet2_eta();
  const float &Htag_subjet2_phi();
  const float &Htag_subjet2_dr();
  const float &Htag_subjet2_alpha();
  const float &Htag_gen_higgs_dr();
  const float &Htag_gen_higgs_alpha();
  const float &Htag_gen_whad_dr();
  const float &Htag_gen_whad_alpha();
  const float &Htag_gen_wlep_dr();
  const float &Htag_gen_wlep_alpha();
  const float &Htag_gen_q0_dr();
  const float &Htag_gen_q0_alpha();
  const float &Htag_gen_q1_dr();
  const float &Htag_gen_q1_alpha();
  const float &Htag_gen_lep_dr();
  const float &Htag_gen_lep_alpha();
  const float &Htag_gen_neu_dr();
  const float &Htag_gen_neu_alpha();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_leadak4_p4();
  const int &Recoil_leadak4_npfcands();
  const int &Recoil_leadak4_chargedHadronMultiplicity();
  const int &Recoil_leadak4_chargedMultiplicity();
  const int &Recoil_leadak4_electronMultiplicity();
  const int &Recoil_leadak4_muonMultiplicity();
  const int &Recoil_leadak4_neutralHadronMultiplicity();
  const int &Recoil_leadak4_neutralMultiplicity();
  const int &Recoil_leadak4_photonMultiplicity();
  const int &Recoil_leadak4_totalMultiplicity();
  const int &Recoil_leadak4_puppi_chargedHadronMultiplicity();
  const int &Recoil_leadak4_puppi_chargedMultiplicity();
  const int &Recoil_leadak4_puppi_electronMultiplicity();
  const int &Recoil_leadak4_puppi_muonMultiplicity();
  const int &Recoil_leadak4_puppi_neutralHadronMultiplicity();
  const int &Recoil_leadak4_puppi_neutralMultiplicity();
  const int &Recoil_leadak4_puppi_photonMultiplicity();
  const int &Recoil_leadak4_puppi_totalMultiplicity();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_allj_1_4_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_allj_1_4_leadak4_p4();
  const int &Recoil_allj_1_4_leadak4_npfcands();
  const int &Recoil_allj_1_4_leadak4_chargedHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_chargedMultiplicity();
  const int &Recoil_allj_1_4_leadak4_electronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_muonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_neutralHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_neutralMultiplicity();
  const int &Recoil_allj_1_4_leadak4_photonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_totalMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_chargedHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_chargedMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_electronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_muonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_neutralHadronMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_neutralMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_photonMultiplicity();
  const int &Recoil_allj_1_4_leadak4_puppi_totalMultiplicity();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_j_3_4_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Recoil_j_3_4_leadak4_p4();
  const int &Recoil_j_3_4_leadak4_npfcands();
  const int &Recoil_j_3_4_leadak4_chargedHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_chargedMultiplicity();
  const int &Recoil_j_3_4_leadak4_electronMultiplicity();
  const int &Recoil_j_3_4_leadak4_muonMultiplicity();
  const int &Recoil_j_3_4_leadak4_neutralHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_neutralMultiplicity();
  const int &Recoil_j_3_4_leadak4_photonMultiplicity();
  const int &Recoil_j_3_4_leadak4_totalMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_chargedHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_chargedMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_electronMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_muonMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_neutralHadronMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_neutralMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_photonMultiplicity();
  const int &Recoil_j_3_4_leadak4_puppi_totalMultiplicity();
  const float &gen_ht();
  const float &nvtx();
}
#include "rooutil.h"
#endif
