// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/nfs-7/userdata/phchang/babies/HWW2016_v6.0.0/ggf.root", "t", "hwwtree", "tas", "hww")

#ifndef hwwtree_H
#define hwwtree_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class hwwtree {
 private: 
 protected: 
  unsigned int index;
  int      run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  int      lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned long long evt_;
  TBranch *evt_branch;
  bool     evt_isLoaded;
  int      isData_;
  TBranch *isData_branch;
  bool     isData_isLoaded;
  float    evt_scale1fb_;
  TBranch *evt_scale1fb_branch;
  bool     evt_scale1fb_isLoaded;
  float    genps_weight_;
  TBranch *genps_weight_branch;
  bool     genps_weight_isLoaded;
  float    xsec_br_;
  TBranch *xsec_br_branch;
  bool     xsec_br_isLoaded;
  int      evt_passgoodrunlist_;
  TBranch *evt_passgoodrunlist_branch;
  bool     evt_passgoodrunlist_isLoaded;
  TString *CMS4path_;
  TBranch *CMS4path_branch;
  bool     CMS4path_isLoaded;
  int      CMS4index_;
  TBranch *CMS4index_branch;
  bool     CMS4index_isLoaded;
  float    weight_fr_r1_f1_;
  TBranch *weight_fr_r1_f1_branch;
  bool     weight_fr_r1_f1_isLoaded;
  float    weight_fr_r1_f2_;
  TBranch *weight_fr_r1_f2_branch;
  bool     weight_fr_r1_f2_isLoaded;
  float    weight_fr_r1_f0p5_;
  TBranch *weight_fr_r1_f0p5_branch;
  bool     weight_fr_r1_f0p5_isLoaded;
  float    weight_fr_r2_f1_;
  TBranch *weight_fr_r2_f1_branch;
  bool     weight_fr_r2_f1_isLoaded;
  float    weight_fr_r2_f2_;
  TBranch *weight_fr_r2_f2_branch;
  bool     weight_fr_r2_f2_isLoaded;
  float    weight_fr_r2_f0p5_;
  TBranch *weight_fr_r2_f0p5_branch;
  bool     weight_fr_r2_f0p5_isLoaded;
  float    weight_fr_r0p5_f1_;
  TBranch *weight_fr_r0p5_f1_branch;
  bool     weight_fr_r0p5_f1_isLoaded;
  float    weight_fr_r0p5_f2_;
  TBranch *weight_fr_r0p5_f2_branch;
  bool     weight_fr_r0p5_f2_isLoaded;
  float    weight_fr_r0p5_f0p5_;
  TBranch *weight_fr_r0p5_f0p5_branch;
  bool     weight_fr_r0p5_f0p5_isLoaded;
  float    weight_pdf_up_;
  TBranch *weight_pdf_up_branch;
  bool     weight_pdf_up_isLoaded;
  float    weight_pdf_down_;
  TBranch *weight_pdf_down_branch;
  bool     weight_pdf_down_isLoaded;
  float    weight_alphas_down_;
  TBranch *weight_alphas_down_branch;
  bool     weight_alphas_down_isLoaded;
  float    weight_alphas_up_;
  TBranch *weight_alphas_up_branch;
  bool     weight_alphas_up_isLoaded;
  int      HLT_Ele27_WPLoose_Gsf_;
  TBranch *HLT_Ele27_WPLoose_Gsf_branch;
  bool     HLT_Ele27_WPLoose_Gsf_isLoaded;
  int      HLT_Ele30_WPLoose_Gsf_;
  TBranch *HLT_Ele30_WPLoose_Gsf_branch;
  bool     HLT_Ele30_WPLoose_Gsf_isLoaded;
  int      HLT_Ele45_WPLoose_Gsf_;
  TBranch *HLT_Ele45_WPLoose_Gsf_branch;
  bool     HLT_Ele45_WPLoose_Gsf_isLoaded;
  int      HLT_Ele105_CaloIdVT_GsfTrkIdT_;
  TBranch *HLT_Ele105_CaloIdVT_GsfTrkIdT_branch;
  bool     HLT_Ele105_CaloIdVT_GsfTrkIdT_isLoaded;
  int      HLT_Ele115_CaloIdVT_GsfTrkIdT_;
  TBranch *HLT_Ele115_CaloIdVT_GsfTrkIdT_branch;
  bool     HLT_Ele115_CaloIdVT_GsfTrkIdT_isLoaded;
  int      HLT_IsoTkMu24_;
  TBranch *HLT_IsoTkMu24_branch;
  bool     HLT_IsoTkMu24_isLoaded;
  int      HLT_IsoMu24_;
  TBranch *HLT_IsoMu24_branch;
  bool     HLT_IsoMu24_isLoaded;
  int      HLT_SingleMu50_;
  TBranch *HLT_SingleMu50_branch;
  bool     HLT_SingleMu50_isLoaded;
  int      HLT_SingleEl40_;
  TBranch *HLT_SingleEl40_branch;
  bool     HLT_SingleEl40_isLoaded;
  int      HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_;
  TBranch *HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_branch;
  bool     HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165_isLoaded;
  int      HLT_Mu50_;
  TBranch *HLT_Mu50_branch;
  bool     HLT_Mu50_isLoaded;
  int      HLT_TkMu50_;
  TBranch *HLT_TkMu50_branch;
  bool     HLT_TkMu50_isLoaded;
  int      HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_;
  TBranch *HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_branch;
  bool     HLT_AK8PFHT700_TrimR0p1PT0p03Mass50_isLoaded;
  int      HLT_AK8PFJet360_TrimMass30_;
  TBranch *HLT_AK8PFJet360_TrimMass30_branch;
  bool     HLT_AK8PFJet360_TrimMass30_isLoaded;
  int      HLT_PFHT800_;
  TBranch *HLT_PFHT800_branch;
  bool     HLT_PFHT800_isLoaded;
  int      HLT_PFHT900_;
  TBranch *HLT_PFHT900_branch;
  bool     HLT_PFHT900_isLoaded;
  int      HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_;
  TBranch *HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_branch;
  bool     HLT_PFHT650_WideJetMJJ900DEtaJJ1p5_isLoaded;
  int      HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_;
  TBranch *HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_branch;
  bool     HLT_PFHT650_WideJetMJJ950DEtaJJ1p5_isLoaded;
  int      HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20_;
  TBranch *HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20_branch;
  bool     HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20_isLoaded;
  int      pass_duplicate_se_sm_;
  TBranch *pass_duplicate_se_sm_branch;
  bool     pass_duplicate_se_sm_isLoaded;
  int      pass_duplicate_sm_se_;
  TBranch *pass_duplicate_sm_se_branch;
  bool     pass_duplicate_sm_se_isLoaded;
  float    gen_ht_;
  TBranch *gen_ht_branch;
  bool     gen_ht_isLoaded;
  float    nvtx_;
  TBranch *nvtx_branch;
  bool     nvtx_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *L_p4_;
  TBranch *L_p4_branch;
  bool     L_p4_isLoaded;
  float    L_pt_;
  TBranch *L_pt_branch;
  bool     L_pt_isLoaded;
  float    L_eta_;
  TBranch *L_eta_branch;
  bool     L_eta_isLoaded;
  float    L_phi_;
  TBranch *L_phi_branch;
  bool     L_phi_isLoaded;
  float    L_mass_;
  TBranch *L_mass_branch;
  bool     L_mass_isLoaded;
  float    L_energy_;
  TBranch *L_energy_branch;
  bool     L_energy_isLoaded;
  int      L_id_;
  TBranch *L_id_branch;
  bool     L_id_isLoaded;
  int      L_idx_;
  TBranch *L_idx_branch;
  bool     L_idx_isLoaded;
  int      L_isTightPOG_;
  TBranch *L_isTightPOG_branch;
  bool     L_isTightPOG_isLoaded;
  float    L_miniIsoEA_;
  TBranch *L_miniIsoEA_branch;
  bool     L_miniIsoEA_isLoaded;
  float    L_relIso03EA_;
  TBranch *L_relIso03EA_branch;
  bool     L_relIso03EA_isLoaded;
  float    L_relIso04DB_;
  TBranch *L_relIso04DB_branch;
  bool     L_relIso04DB_isLoaded;
  float    L_relIso0025EA_;
  TBranch *L_relIso0025EA_branch;
  bool     L_relIso0025EA_isLoaded;
  float    L_relIso005EA_;
  TBranch *L_relIso005EA_branch;
  bool     L_relIso005EA_isLoaded;
  float    L_relIso01EA_;
  TBranch *L_relIso01EA_branch;
  bool     L_relIso01EA_isLoaded;
  float    L_relIso02EA_;
  TBranch *L_relIso02EA_branch;
  bool     L_relIso02EA_isLoaded;
  float    L_relIso04EA_;
  TBranch *L_relIso04EA_branch;
  bool     L_relIso04EA_isLoaded;
  float    L_relIso08EA_;
  TBranch *L_relIso08EA_branch;
  bool     L_relIso08EA_isLoaded;
  float    L_relIso0025EAwLep_;
  TBranch *L_relIso0025EAwLep_branch;
  bool     L_relIso0025EAwLep_isLoaded;
  float    L_relIso005EAwLep_;
  TBranch *L_relIso005EAwLep_branch;
  bool     L_relIso005EAwLep_isLoaded;
  float    L_relIso01EAwLep_;
  TBranch *L_relIso01EAwLep_branch;
  bool     L_relIso01EAwLep_isLoaded;
  float    L_relIso02EAwLep_;
  TBranch *L_relIso02EAwLep_branch;
  bool     L_relIso02EAwLep_isLoaded;
  float    L_relIso04EAwLep_;
  TBranch *L_relIso04EAwLep_branch;
  bool     L_relIso04EAwLep_isLoaded;
  float    L_relIso08EAwLep_;
  TBranch *L_relIso08EAwLep_branch;
  bool     L_relIso08EAwLep_isLoaded;
  float    L_ip3d_;
  TBranch *L_ip3d_branch;
  bool     L_ip3d_isLoaded;
  float    L_ip3derr_;
  TBranch *L_ip3derr_branch;
  bool     L_ip3derr_isLoaded;
  float    L_dxy_;
  TBranch *L_dxy_branch;
  bool     L_dxy_isLoaded;
  float    L_dz_;
  TBranch *L_dz_branch;
  bool     L_dz_isLoaded;
  int      L_isFromW_;
  TBranch *L_isFromW_branch;
  bool     L_isFromW_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *X_p4_;
  TBranch *X_p4_branch;
  bool     X_p4_isLoaded;
  float    X_pt_;
  TBranch *X_pt_branch;
  bool     X_pt_isLoaded;
  float    X_phi_;
  TBranch *X_phi_branch;
  bool     X_phi_isLoaded;
  float    X_up_pt_;
  TBranch *X_up_pt_branch;
  bool     X_up_pt_isLoaded;
  float    X_up_phi_;
  TBranch *X_up_phi_branch;
  bool     X_up_phi_isLoaded;
  float    X_dn_pt_;
  TBranch *X_dn_pt_branch;
  bool     X_dn_pt_isLoaded;
  float    X_dn_phi_;
  TBranch *X_dn_phi_branch;
  bool     X_dn_phi_isLoaded;
  float    X_gen_pt_;
  TBranch *X_gen_pt_branch;
  bool     X_gen_pt_isLoaded;
  float    X_gen_phi_;
  TBranch *X_gen_phi_branch;
  bool     X_gen_phi_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *J_p4_;
  TBranch *J_p4_branch;
  bool     J_p4_isLoaded;
  float    J_pt_;
  TBranch *J_pt_branch;
  bool     J_pt_isLoaded;
  float    J_eta_;
  TBranch *J_eta_branch;
  bool     J_eta_isLoaded;
  float    J_phi_;
  TBranch *J_phi_branch;
  bool     J_phi_isLoaded;
  float    J_mass_;
  TBranch *J_mass_branch;
  bool     J_mass_isLoaded;
  float    J_energy_;
  TBranch *J_energy_branch;
  bool     J_energy_isLoaded;
  float    J_tau31_;
  TBranch *J_tau31_branch;
  bool     J_tau31_isLoaded;
  float    J_tau32_;
  TBranch *J_tau32_branch;
  bool     J_tau32_isLoaded;
  float    J_tau21_;
  TBranch *J_tau21_branch;
  bool     J_tau21_isLoaded;
  float    J_tau1_;
  TBranch *J_tau1_branch;
  bool     J_tau1_isLoaded;
  float    J_tau2_;
  TBranch *J_tau2_branch;
  bool     J_tau2_isLoaded;
  float    J_tau3_;
  TBranch *J_tau3_branch;
  bool     J_tau3_isLoaded;
  float    J_undoJEC_;
  TBranch *J_undoJEC_branch;
  bool     J_undoJEC_isLoaded;
  float    J_shift_;
  TBranch *J_shift_branch;
  bool     J_shift_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *J_SD_p4_;
  TBranch *J_SD_p4_branch;
  bool     J_SD_p4_isLoaded;
  float    J_SD_pt_;
  TBranch *J_SD_pt_branch;
  bool     J_SD_pt_isLoaded;
  float    J_SD_eta_;
  TBranch *J_SD_eta_branch;
  bool     J_SD_eta_isLoaded;
  float    J_SD_phi_;
  TBranch *J_SD_phi_branch;
  bool     J_SD_phi_isLoaded;
  float    J_SD_mass_;
  TBranch *J_SD_mass_branch;
  bool     J_SD_mass_isLoaded;
  float    J_SD_energy_;
  TBranch *J_SD_energy_branch;
  bool     J_SD_energy_isLoaded;
  float    J_SD_tau31_;
  TBranch *J_SD_tau31_branch;
  bool     J_SD_tau31_isLoaded;
  float    J_SD_tau32_;
  TBranch *J_SD_tau32_branch;
  bool     J_SD_tau32_isLoaded;
  float    J_SD_tau21_;
  TBranch *J_SD_tau21_branch;
  bool     J_SD_tau21_isLoaded;
  float    J_SD_tau1_;
  TBranch *J_SD_tau1_branch;
  bool     J_SD_tau1_isLoaded;
  float    J_SD_tau2_;
  TBranch *J_SD_tau2_branch;
  bool     J_SD_tau2_isLoaded;
  float    J_SD_tau3_;
  TBranch *J_SD_tau3_branch;
  bool     J_SD_tau3_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *q0_p4_;
  TBranch *q0_p4_branch;
  bool     q0_p4_isLoaded;
  float    q0_pt_;
  TBranch *q0_pt_branch;
  bool     q0_pt_isLoaded;
  float    q0_eta_;
  TBranch *q0_eta_branch;
  bool     q0_eta_isLoaded;
  float    q0_phi_;
  TBranch *q0_phi_branch;
  bool     q0_phi_isLoaded;
  float    q0_mass_;
  TBranch *q0_mass_branch;
  bool     q0_mass_isLoaded;
  float    q0_energy_;
  TBranch *q0_energy_branch;
  bool     q0_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *q1_p4_;
  TBranch *q1_p4_branch;
  bool     q1_p4_isLoaded;
  float    q1_pt_;
  TBranch *q1_pt_branch;
  bool     q1_pt_isLoaded;
  float    q1_eta_;
  TBranch *q1_eta_branch;
  bool     q1_eta_isLoaded;
  float    q1_phi_;
  TBranch *q1_phi_branch;
  bool     q1_phi_isLoaded;
  float    q1_mass_;
  TBranch *q1_mass_branch;
  bool     q1_mass_isLoaded;
  float    q1_energy_;
  TBranch *q1_energy_branch;
  bool     q1_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *V_p4_;
  TBranch *V_p4_branch;
  bool     V_p4_isLoaded;
  float    V_pt_;
  TBranch *V_pt_branch;
  bool     V_pt_isLoaded;
  float    V_eta_;
  TBranch *V_eta_branch;
  bool     V_eta_isLoaded;
  float    V_phi_;
  TBranch *V_phi_branch;
  bool     V_phi_isLoaded;
  float    V_mass_;
  TBranch *V_mass_branch;
  bool     V_mass_isLoaded;
  float    V_energy_;
  TBranch *V_energy_branch;
  bool     V_energy_isLoaded;
  float    V_SD_mass_;
  TBranch *V_SD_mass_branch;
  bool     V_SD_mass_isLoaded;
  float    V_tau31_;
  TBranch *V_tau31_branch;
  bool     V_tau31_isLoaded;
  float    V_tau32_;
  TBranch *V_tau32_branch;
  bool     V_tau32_isLoaded;
  float    V_tau21_;
  TBranch *V_tau21_branch;
  bool     V_tau21_isLoaded;
  float    V_tau1_;
  TBranch *V_tau1_branch;
  bool     V_tau1_isLoaded;
  float    V_tau2_;
  TBranch *V_tau2_branch;
  bool     V_tau2_isLoaded;
  float    V_tau3_;
  TBranch *V_tau3_branch;
  bool     V_tau3_isLoaded;
  float    V_undoJEC_;
  TBranch *V_undoJEC_branch;
  bool     V_undoJEC_isLoaded;
  float    V_shift_;
  TBranch *V_shift_branch;
  bool     V_shift_isLoaded;
  float    V_deep_rawdisc_h4q_;
  TBranch *V_deep_rawdisc_h4q_branch;
  bool     V_deep_rawdisc_h4q_isLoaded;
  float    V_deep_rawdisc_hbb_;
  TBranch *V_deep_rawdisc_hbb_branch;
  bool     V_deep_rawdisc_hbb_isLoaded;
  float    V_deep_rawdisc_qcd_;
  TBranch *V_deep_rawdisc_qcd_branch;
  bool     V_deep_rawdisc_qcd_isLoaded;
  float    V_deep_rawdisc_top_;
  TBranch *V_deep_rawdisc_top_branch;
  bool     V_deep_rawdisc_top_isLoaded;
  float    V_deep_rawdisc_w_;
  TBranch *V_deep_rawdisc_w_branch;
  bool     V_deep_rawdisc_w_isLoaded;
  float    V_deep_rawdisc_z_;
  TBranch *V_deep_rawdisc_z_branch;
  bool     V_deep_rawdisc_z_isLoaded;
  float    V_deep_rawdisc_zbb_;
  TBranch *V_deep_rawdisc_zbb_branch;
  bool     V_deep_rawdisc_zbb_isLoaded;
  float    V_softdropPuppiSubjet1_pt_;
  TBranch *V_softdropPuppiSubjet1_pt_branch;
  bool     V_softdropPuppiSubjet1_pt_isLoaded;
  float    V_softdropPuppiSubjet1_eta_;
  TBranch *V_softdropPuppiSubjet1_eta_branch;
  bool     V_softdropPuppiSubjet1_eta_isLoaded;
  float    V_softdropPuppiSubjet1_phi_;
  TBranch *V_softdropPuppiSubjet1_phi_branch;
  bool     V_softdropPuppiSubjet1_phi_isLoaded;
  float    V_softdropPuppiSubjet1_mass_;
  TBranch *V_softdropPuppiSubjet1_mass_branch;
  bool     V_softdropPuppiSubjet1_mass_isLoaded;
  float    V_softdropPuppiSubjet1_energy_;
  TBranch *V_softdropPuppiSubjet1_energy_branch;
  bool     V_softdropPuppiSubjet1_energy_isLoaded;
  float    V_softdropPuppiSubjet2_pt_;
  TBranch *V_softdropPuppiSubjet2_pt_branch;
  bool     V_softdropPuppiSubjet2_pt_isLoaded;
  float    V_softdropPuppiSubjet2_eta_;
  TBranch *V_softdropPuppiSubjet2_eta_branch;
  bool     V_softdropPuppiSubjet2_eta_isLoaded;
  float    V_softdropPuppiSubjet2_phi_;
  TBranch *V_softdropPuppiSubjet2_phi_branch;
  bool     V_softdropPuppiSubjet2_phi_isLoaded;
  float    V_softdropPuppiSubjet2_mass_;
  TBranch *V_softdropPuppiSubjet2_mass_branch;
  bool     V_softdropPuppiSubjet2_mass_isLoaded;
  float    V_softdropPuppiSubjet2_energy_;
  TBranch *V_softdropPuppiSubjet2_energy_branch;
  bool     V_softdropPuppiSubjet2_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *LXJ_p4_;
  TBranch *LXJ_p4_branch;
  bool     LXJ_p4_isLoaded;
  float    LXJ_pt_;
  TBranch *LXJ_pt_branch;
  bool     LXJ_pt_isLoaded;
  float    LXJ_eta_;
  TBranch *LXJ_eta_branch;
  bool     LXJ_eta_isLoaded;
  float    LXJ_phi_;
  TBranch *LXJ_phi_branch;
  bool     LXJ_phi_isLoaded;
  float    LXJ_mass_;
  TBranch *LXJ_mass_branch;
  bool     LXJ_mass_isLoaded;
  float    LXJ_energy_;
  TBranch *LXJ_energy_branch;
  bool     LXJ_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *LXJ_SD_p4_;
  TBranch *LXJ_SD_p4_branch;
  bool     LXJ_SD_p4_isLoaded;
  float    LXJ_SD_pt_;
  TBranch *LXJ_SD_pt_branch;
  bool     LXJ_SD_pt_isLoaded;
  float    LXJ_SD_eta_;
  TBranch *LXJ_SD_eta_branch;
  bool     LXJ_SD_eta_isLoaded;
  float    LXJ_SD_phi_;
  TBranch *LXJ_SD_phi_branch;
  bool     LXJ_SD_phi_isLoaded;
  float    LXJ_SD_mass_;
  TBranch *LXJ_SD_mass_branch;
  bool     LXJ_SD_mass_isLoaded;
  float    LXJ_SD_energy_;
  TBranch *LXJ_SD_energy_branch;
  bool     LXJ_SD_energy_isLoaded;
  float    LX_pt_;
  TBranch *LX_pt_branch;
  bool     LX_pt_isLoaded;
  float    LX_mt_;
  TBranch *LX_mt_branch;
  bool     LX_mt_isLoaded;
  float    LX_mass_;
  TBranch *LX_mass_branch;
  bool     LX_mass_isLoaded;
  float    LX_dphi_;
  TBranch *LX_dphi_branch;
  bool     LX_dphi_isLoaded;
  float    LJ_pt_;
  TBranch *LJ_pt_branch;
  bool     LJ_pt_isLoaded;
  float    LJ_mt_;
  TBranch *LJ_mt_branch;
  bool     LJ_mt_isLoaded;
  float    LJ_mass_;
  TBranch *LJ_mass_branch;
  bool     LJ_mass_isLoaded;
  float    LJ_dphi_;
  TBranch *LJ_dphi_branch;
  bool     LJ_dphi_isLoaded;
  float    LJ_deta_;
  TBranch *LJ_deta_branch;
  bool     LJ_deta_isLoaded;
  float    LJ_dr_;
  TBranch *LJ_dr_branch;
  bool     LJ_dr_isLoaded;
  float    LJ_dptf_;
  TBranch *LJ_dptf_branch;
  bool     LJ_dptf_isLoaded;
  float    LJ_SD_pt_;
  TBranch *LJ_SD_pt_branch;
  bool     LJ_SD_pt_isLoaded;
  float    LJ_SD_mt_;
  TBranch *LJ_SD_mt_branch;
  bool     LJ_SD_mt_isLoaded;
  float    LJ_SD_mass_;
  TBranch *LJ_SD_mass_branch;
  bool     LJ_SD_mass_isLoaded;
  float    LJ_SD_dphi_;
  TBranch *LJ_SD_dphi_branch;
  bool     LJ_SD_dphi_isLoaded;
  float    LJ_SD_deta_;
  TBranch *LJ_SD_deta_branch;
  bool     LJ_SD_deta_isLoaded;
  float    LJ_SD_dr_;
  TBranch *LJ_SD_dr_branch;
  bool     LJ_SD_dr_isLoaded;
  float    LJ_SD_dptf_;
  TBranch *LJ_SD_dptf_branch;
  bool     LJ_SD_dptf_isLoaded;
  float    Lq0_pt_;
  TBranch *Lq0_pt_branch;
  bool     Lq0_pt_isLoaded;
  float    Lq0_mt_;
  TBranch *Lq0_mt_branch;
  bool     Lq0_mt_isLoaded;
  float    Lq0_mass_;
  TBranch *Lq0_mass_branch;
  bool     Lq0_mass_isLoaded;
  float    Lq0_dphi_;
  TBranch *Lq0_dphi_branch;
  bool     Lq0_dphi_isLoaded;
  float    Lq0_deta_;
  TBranch *Lq0_deta_branch;
  bool     Lq0_deta_isLoaded;
  float    Lq0_dr_;
  TBranch *Lq0_dr_branch;
  bool     Lq0_dr_isLoaded;
  float    Lq0_dptf_;
  TBranch *Lq0_dptf_branch;
  bool     Lq0_dptf_isLoaded;
  float    Lq1_pt_;
  TBranch *Lq1_pt_branch;
  bool     Lq1_pt_isLoaded;
  float    Lq1_mt_;
  TBranch *Lq1_mt_branch;
  bool     Lq1_mt_isLoaded;
  float    Lq1_mass_;
  TBranch *Lq1_mass_branch;
  bool     Lq1_mass_isLoaded;
  float    Lq1_dphi_;
  TBranch *Lq1_dphi_branch;
  bool     Lq1_dphi_isLoaded;
  float    Lq1_deta_;
  TBranch *Lq1_deta_branch;
  bool     Lq1_deta_isLoaded;
  float    Lq1_dr_;
  TBranch *Lq1_dr_branch;
  bool     Lq1_dr_isLoaded;
  float    Lq1_dptf_;
  TBranch *Lq1_dptf_branch;
  bool     Lq1_dptf_isLoaded;
  float    Lqmax_pt_;
  TBranch *Lqmax_pt_branch;
  bool     Lqmax_pt_isLoaded;
  float    Lqmax_mt_;
  TBranch *Lqmax_mt_branch;
  bool     Lqmax_mt_isLoaded;
  float    Lqmax_mass_;
  TBranch *Lqmax_mass_branch;
  bool     Lqmax_mass_isLoaded;
  float    Lqmax_dphi_;
  TBranch *Lqmax_dphi_branch;
  bool     Lqmax_dphi_isLoaded;
  float    Lqmax_deta_;
  TBranch *Lqmax_deta_branch;
  bool     Lqmax_deta_isLoaded;
  float    Lqmax_dr_;
  TBranch *Lqmax_dr_branch;
  bool     Lqmax_dr_isLoaded;
  float    Lqmax_dptf_;
  TBranch *Lqmax_dptf_branch;
  bool     Lqmax_dptf_isLoaded;
  float    LHRatio_;
  TBranch *LHRatio_branch;
  bool     LHRatio_isLoaded;
  float    LHRatio_SD_;
  TBranch *LHRatio_SD_branch;
  bool     LHRatio_SD_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_;
  TBranch *neu_p4_branch;
  bool     neu_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *neu_p4_h_;
  TBranch *neu_p4_h_branch;
  bool     neu_p4_h_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Wlep_p4_;
  TBranch *Wlep_p4_branch;
  bool     Wlep_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *Wlep_h_p4_;
  TBranch *Wlep_h_p4_branch;
  bool     Wlep_h_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *H_p4_;
  TBranch *H_p4_branch;
  bool     H_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *H_mh_p4_;
  TBranch *H_mh_p4_branch;
  bool     H_mh_p4_isLoaded;
  float    det_;
  TBranch *det_branch;
  bool     det_isLoaded;
  float    detW_;
  TBranch *detW_branch;
  bool     detW_isLoaded;
  float    mH_;
  TBranch *mH_branch;
  bool     mH_isLoaded;
  float    mD_;
  TBranch *mD_branch;
  bool     mD_isLoaded;
  float    mD_SD_;
  TBranch *mD_SD_branch;
  bool     mD_SD_isLoaded;
  float    mD_Wlep_;
  TBranch *mD_Wlep_branch;
  bool     mD_Wlep_isLoaded;
  vector<float> *j_dphis_;
  TBranch *j_dphis_branch;
  bool     j_dphis_isLoaded;
  vector<float> *j_drs_;
  TBranch *j_drs_branch;
  bool     j_drs_isLoaded;
  vector<float> *j_SD_dphis_;
  TBranch *j_SD_dphis_branch;
  bool     j_SD_dphis_isLoaded;
  vector<float> *j_SD_drs_;
  TBranch *j_SD_drs_branch;
  bool     j_SD_drs_isLoaded;
  vector<float> *j_pts_;
  TBranch *j_pts_branch;
  bool     j_pts_isLoaded;
  int      nj_;
  TBranch *nj_branch;
  bool     nj_isLoaded;
  int      nj_in_;
  TBranch *nj_in_branch;
  bool     nj_in_isLoaded;
  int      nj_annuli_;
  TBranch *nj_annuli_branch;
  bool     nj_annuli_isLoaded;
  int      nj_same_;
  TBranch *nj_same_branch;
  bool     nj_same_isLoaded;
  int      nj_away_;
  TBranch *nj_away_branch;
  bool     nj_away_isLoaded;
  int      nj_SD_in_;
  TBranch *nj_SD_in_branch;
  bool     nj_SD_in_isLoaded;
  int      nj_SD_annuli_;
  TBranch *nj_SD_annuli_branch;
  bool     nj_SD_annuli_isLoaded;
  int      nj_SD_same_;
  TBranch *nj_SD_same_branch;
  bool     nj_SD_same_isLoaded;
  int      nj_SD_away_;
  TBranch *nj_SD_away_branch;
  bool     nj_SD_away_isLoaded;
  int      nb_;
  TBranch *nb_branch;
  bool     nb_isLoaded;
  int      nb_in_;
  TBranch *nb_in_branch;
  bool     nb_in_isLoaded;
  int      nb_annuli_;
  TBranch *nb_annuli_branch;
  bool     nb_annuli_isLoaded;
  int      nb_same_;
  TBranch *nb_same_branch;
  bool     nb_same_isLoaded;
  int      nb_away_;
  TBranch *nb_away_branch;
  bool     nb_away_isLoaded;
  int      nb_SD_in_;
  TBranch *nb_SD_in_branch;
  bool     nb_SD_in_isLoaded;
  int      nb_SD_annuli_;
  TBranch *nb_SD_annuli_branch;
  bool     nb_SD_annuli_isLoaded;
  int      nb_SD_same_;
  TBranch *nb_SD_same_branch;
  bool     nb_SD_same_isLoaded;
  int      nb_SD_away_;
  TBranch *nb_SD_away_branch;
  bool     nb_SD_away_isLoaded;
  int      nbmed_;
  TBranch *nbmed_branch;
  bool     nbmed_isLoaded;
  int      nbmed_in_;
  TBranch *nbmed_in_branch;
  bool     nbmed_in_isLoaded;
  int      nbmed_annuli_;
  TBranch *nbmed_annuli_branch;
  bool     nbmed_annuli_isLoaded;
  int      nbmed_same_;
  TBranch *nbmed_same_branch;
  bool     nbmed_same_isLoaded;
  int      nbmed_away_;
  TBranch *nbmed_away_branch;
  bool     nbmed_away_isLoaded;
  int      nbmed_SD_in_;
  TBranch *nbmed_SD_in_branch;
  bool     nbmed_SD_in_isLoaded;
  int      nbmed_SD_annuli_;
  TBranch *nbmed_SD_annuli_branch;
  bool     nbmed_SD_annuli_isLoaded;
  int      nbmed_SD_same_;
  TBranch *nbmed_SD_same_branch;
  bool     nbmed_SD_same_isLoaded;
  int      nbmed_SD_away_;
  TBranch *nbmed_SD_away_branch;
  bool     nbmed_SD_away_isLoaded;
  int      nbtight_;
  TBranch *nbtight_branch;
  bool     nbtight_isLoaded;
  int      nbtight_in_;
  TBranch *nbtight_in_branch;
  bool     nbtight_in_isLoaded;
  int      nbtight_annuli_;
  TBranch *nbtight_annuli_branch;
  bool     nbtight_annuli_isLoaded;
  int      nbtight_same_;
  TBranch *nbtight_same_branch;
  bool     nbtight_same_isLoaded;
  int      nbtight_away_;
  TBranch *nbtight_away_branch;
  bool     nbtight_away_isLoaded;
  int      nbtight_SD_in_;
  TBranch *nbtight_SD_in_branch;
  bool     nbtight_SD_in_isLoaded;
  int      nbtight_SD_annuli_;
  TBranch *nbtight_SD_annuli_branch;
  bool     nbtight_SD_annuli_isLoaded;
  int      nbtight_SD_same_;
  TBranch *nbtight_SD_same_branch;
  bool     nbtight_SD_same_isLoaded;
  int      nbtight_SD_away_;
  TBranch *nbtight_SD_away_branch;
  bool     nbtight_SD_away_isLoaded;
  float    ht_;
  TBranch *ht_branch;
  bool     ht_isLoaded;
  float    ht_in_;
  TBranch *ht_in_branch;
  bool     ht_in_isLoaded;
  float    ht_annuli_;
  TBranch *ht_annuli_branch;
  bool     ht_annuli_isLoaded;
  float    ht_same_;
  TBranch *ht_same_branch;
  bool     ht_same_isLoaded;
  float    ht_away_;
  TBranch *ht_away_branch;
  bool     ht_away_isLoaded;
  float    ht_SD_in_;
  TBranch *ht_SD_in_branch;
  bool     ht_SD_in_isLoaded;
  float    ht_SD_annuli_;
  TBranch *ht_SD_annuli_branch;
  bool     ht_SD_annuli_isLoaded;
  float    ht_SD_same_;
  TBranch *ht_SD_same_branch;
  bool     ht_SD_same_isLoaded;
  float    ht_SD_away_;
  TBranch *ht_SD_away_branch;
  bool     ht_SD_away_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *R_p4_;
  TBranch *R_p4_branch;
  bool     R_p4_isLoaded;
  float    R_pt_;
  TBranch *R_pt_branch;
  bool     R_pt_isLoaded;
  float    R_eta_;
  TBranch *R_eta_branch;
  bool     R_eta_isLoaded;
  float    R_phi_;
  TBranch *R_phi_branch;
  bool     R_phi_isLoaded;
  float    R_mass_;
  TBranch *R_mass_branch;
  bool     R_mass_isLoaded;
  float    R_energy_;
  TBranch *R_energy_branch;
  bool     R_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *R_cent_p4_;
  TBranch *R_cent_p4_branch;
  bool     R_cent_p4_isLoaded;
  float    R_cent_pt_;
  TBranch *R_cent_pt_branch;
  bool     R_cent_pt_isLoaded;
  float    R_cent_eta_;
  TBranch *R_cent_eta_branch;
  bool     R_cent_eta_isLoaded;
  float    R_cent_phi_;
  TBranch *R_cent_phi_branch;
  bool     R_cent_phi_isLoaded;
  float    R_cent_mass_;
  TBranch *R_cent_mass_branch;
  bool     R_cent_mass_isLoaded;
  float    R_cent_energy_;
  TBranch *R_cent_energy_branch;
  bool     R_cent_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_recoil_p4_;
  TBranch *gen_recoil_p4_branch;
  bool     gen_recoil_p4_isLoaded;
  int      gen_recoil_id_;
  TBranch *gen_recoil_id_branch;
  bool     gen_recoil_id_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_higgs_p4_;
  TBranch *gen_higgs_p4_branch;
  bool     gen_higgs_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_whad_p4_;
  TBranch *gen_whad_p4_branch;
  bool     gen_whad_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_wlep_p4_;
  TBranch *gen_wlep_p4_branch;
  bool     gen_wlep_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_q0_p4_;
  TBranch *gen_q0_p4_branch;
  bool     gen_q0_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_q1_p4_;
  TBranch *gen_q1_p4_branch;
  bool     gen_q1_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_lep_p4_;
  TBranch *gen_lep_p4_branch;
  bool     gen_lep_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_neu_p4_;
  TBranch *gen_neu_p4_branch;
  bool     gen_neu_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_Vq0_p4_;
  TBranch *gen_Vq0_p4_branch;
  bool     gen_Vq0_p4_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_Vq1_p4_;
  TBranch *gen_Vq1_p4_branch;
  bool     gen_Vq1_p4_isLoaded;
  int      gen_Vq0_id_;
  TBranch *gen_Vq0_id_branch;
  bool     gen_Vq0_id_isLoaded;
  int      gen_Vq1_id_;
  TBranch *gen_Vq1_id_branch;
  bool     gen_Vq1_id_isLoaded;
  int      gen_q0_id_;
  TBranch *gen_q0_id_branch;
  bool     gen_q0_id_isLoaded;
  int      gen_q1_id_;
  TBranch *gen_q1_id_branch;
  bool     gen_q1_id_isLoaded;
  int      gen_lep_id_;
  TBranch *gen_lep_id_branch;
  bool     gen_lep_id_isLoaded;
  int      gen_neu_id_;
  TBranch *gen_neu_id_branch;
  bool     gen_neu_id_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_b0_p4_;
  TBranch *gen_b0_p4_branch;
  bool     gen_b0_p4_isLoaded;
  float    gen_b0_pt_;
  TBranch *gen_b0_pt_branch;
  bool     gen_b0_pt_isLoaded;
  float    gen_b0_eta_;
  TBranch *gen_b0_eta_branch;
  bool     gen_b0_eta_isLoaded;
  float    gen_b0_phi_;
  TBranch *gen_b0_phi_branch;
  bool     gen_b0_phi_isLoaded;
  float    gen_b0_mass_;
  TBranch *gen_b0_mass_branch;
  bool     gen_b0_mass_isLoaded;
  float    gen_b0_energy_;
  TBranch *gen_b0_energy_branch;
  bool     gen_b0_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_b1_p4_;
  TBranch *gen_b1_p4_branch;
  bool     gen_b1_p4_isLoaded;
  float    gen_b1_pt_;
  TBranch *gen_b1_pt_branch;
  bool     gen_b1_pt_isLoaded;
  float    gen_b1_eta_;
  TBranch *gen_b1_eta_branch;
  bool     gen_b1_eta_isLoaded;
  float    gen_b1_phi_;
  TBranch *gen_b1_phi_branch;
  bool     gen_b1_phi_isLoaded;
  float    gen_b1_mass_;
  TBranch *gen_b1_mass_branch;
  bool     gen_b1_mass_isLoaded;
  float    gen_b1_energy_;
  TBranch *gen_b1_energy_branch;
  bool     gen_b1_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_t0_p4_;
  TBranch *gen_t0_p4_branch;
  bool     gen_t0_p4_isLoaded;
  float    gen_t0_pt_;
  TBranch *gen_t0_pt_branch;
  bool     gen_t0_pt_isLoaded;
  float    gen_t0_eta_;
  TBranch *gen_t0_eta_branch;
  bool     gen_t0_eta_isLoaded;
  float    gen_t0_phi_;
  TBranch *gen_t0_phi_branch;
  bool     gen_t0_phi_isLoaded;
  float    gen_t0_mass_;
  TBranch *gen_t0_mass_branch;
  bool     gen_t0_mass_isLoaded;
  float    gen_t0_energy_;
  TBranch *gen_t0_energy_branch;
  bool     gen_t0_energy_isLoaded;
  ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > *gen_t1_p4_;
  TBranch *gen_t1_p4_branch;
  bool     gen_t1_p4_isLoaded;
  float    gen_t1_pt_;
  TBranch *gen_t1_pt_branch;
  bool     gen_t1_pt_isLoaded;
  float    gen_t1_eta_;
  TBranch *gen_t1_eta_branch;
  bool     gen_t1_eta_isLoaded;
  float    gen_t1_phi_;
  TBranch *gen_t1_phi_branch;
  bool     gen_t1_phi_isLoaded;
  float    gen_t1_mass_;
  TBranch *gen_t1_mass_branch;
  bool     gen_t1_mass_isLoaded;
  float    gen_t1_energy_;
  TBranch *gen_t1_energy_branch;
  bool     gen_t1_energy_isLoaded;
  float    gen_b0_dr_;
  TBranch *gen_b0_dr_branch;
  bool     gen_b0_dr_isLoaded;
  int      gen_b0_in_;
  TBranch *gen_b0_in_branch;
  bool     gen_b0_in_isLoaded;
  int      gen_b0_annuli_;
  TBranch *gen_b0_annuli_branch;
  bool     gen_b0_annuli_isLoaded;
  int      gen_b0_same_;
  TBranch *gen_b0_same_branch;
  bool     gen_b0_same_isLoaded;
  int      gen_b0_away_;
  TBranch *gen_b0_away_branch;
  bool     gen_b0_away_isLoaded;
  float    gen_b1_dr_;
  TBranch *gen_b1_dr_branch;
  bool     gen_b1_dr_isLoaded;
  int      gen_b1_in_;
  TBranch *gen_b1_in_branch;
  bool     gen_b1_in_isLoaded;
  int      gen_b1_annuli_;
  TBranch *gen_b1_annuli_branch;
  bool     gen_b1_annuli_isLoaded;
  int      gen_b1_same_;
  TBranch *gen_b1_same_branch;
  bool     gen_b1_same_isLoaded;
  int      gen_b1_away_;
  TBranch *gen_b1_away_branch;
  bool     gen_b1_away_isLoaded;
  float    gen_b0_SD_dr_;
  TBranch *gen_b0_SD_dr_branch;
  bool     gen_b0_SD_dr_isLoaded;
  int      gen_b0_SD_in_;
  TBranch *gen_b0_SD_in_branch;
  bool     gen_b0_SD_in_isLoaded;
  int      gen_b0_SD_annuli_;
  TBranch *gen_b0_SD_annuli_branch;
  bool     gen_b0_SD_annuli_isLoaded;
  int      gen_b0_SD_same_;
  TBranch *gen_b0_SD_same_branch;
  bool     gen_b0_SD_same_isLoaded;
  int      gen_b0_SD_away_;
  TBranch *gen_b0_SD_away_branch;
  bool     gen_b0_SD_away_isLoaded;
  float    gen_b1_SD_dr_;
  TBranch *gen_b1_SD_dr_branch;
  bool     gen_b1_SD_dr_isLoaded;
  int      gen_b1_SD_in_;
  TBranch *gen_b1_SD_in_branch;
  bool     gen_b1_SD_in_isLoaded;
  int      gen_b1_SD_annuli_;
  TBranch *gen_b1_SD_annuli_branch;
  bool     gen_b1_SD_annuli_isLoaded;
  int      gen_b1_SD_same_;
  TBranch *gen_b1_SD_same_branch;
  bool     gen_b1_SD_same_isLoaded;
  int      gen_b1_SD_away_;
  TBranch *gen_b1_SD_away_branch;
  bool     gen_b1_SD_away_isLoaded;
  float    gen_t0_dr_;
  TBranch *gen_t0_dr_branch;
  bool     gen_t0_dr_isLoaded;
  int      gen_t0_in_;
  TBranch *gen_t0_in_branch;
  bool     gen_t0_in_isLoaded;
  int      gen_t0_annuli_;
  TBranch *gen_t0_annuli_branch;
  bool     gen_t0_annuli_isLoaded;
  int      gen_t0_same_;
  TBranch *gen_t0_same_branch;
  bool     gen_t0_same_isLoaded;
  int      gen_t0_away_;
  TBranch *gen_t0_away_branch;
  bool     gen_t0_away_isLoaded;
  float    gen_t1_dr_;
  TBranch *gen_t1_dr_branch;
  bool     gen_t1_dr_isLoaded;
  int      gen_t1_in_;
  TBranch *gen_t1_in_branch;
  bool     gen_t1_in_isLoaded;
  int      gen_t1_annuli_;
  TBranch *gen_t1_annuli_branch;
  bool     gen_t1_annuli_isLoaded;
  int      gen_t1_same_;
  TBranch *gen_t1_same_branch;
  bool     gen_t1_same_isLoaded;
  int      gen_t1_away_;
  TBranch *gen_t1_away_branch;
  bool     gen_t1_away_isLoaded;
  float    gen_t0_SD_dr_;
  TBranch *gen_t0_SD_dr_branch;
  bool     gen_t0_SD_dr_isLoaded;
  int      gen_t0_SD_in_;
  TBranch *gen_t0_SD_in_branch;
  bool     gen_t0_SD_in_isLoaded;
  int      gen_t0_SD_annuli_;
  TBranch *gen_t0_SD_annuli_branch;
  bool     gen_t0_SD_annuli_isLoaded;
  int      gen_t0_SD_same_;
  TBranch *gen_t0_SD_same_branch;
  bool     gen_t0_SD_same_isLoaded;
  int      gen_t0_SD_away_;
  TBranch *gen_t0_SD_away_branch;
  bool     gen_t0_SD_away_isLoaded;
  float    gen_t1_SD_dr_;
  TBranch *gen_t1_SD_dr_branch;
  bool     gen_t1_SD_dr_isLoaded;
  int      gen_t1_SD_in_;
  TBranch *gen_t1_SD_in_branch;
  bool     gen_t1_SD_in_isLoaded;
  int      gen_t1_SD_annuli_;
  TBranch *gen_t1_SD_annuli_branch;
  bool     gen_t1_SD_annuli_isLoaded;
  int      gen_t1_SD_same_;
  TBranch *gen_t1_SD_same_branch;
  bool     gen_t1_SD_same_isLoaded;
  int      gen_t1_SD_away_;
  TBranch *gen_t1_SD_away_branch;
  bool     gen_t1_SD_away_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &genps_weight();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const int &HLT_Ele27_WPLoose_Gsf();
  const int &HLT_Ele30_WPLoose_Gsf();
  const int &HLT_Ele45_WPLoose_Gsf();
  const int &HLT_Ele105_CaloIdVT_GsfTrkIdT();
  const int &HLT_Ele115_CaloIdVT_GsfTrkIdT();
  const int &HLT_IsoTkMu24();
  const int &HLT_IsoMu24();
  const int &HLT_SingleMu50();
  const int &HLT_SingleEl40();
  const int &HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165();
  const int &HLT_Mu50();
  const int &HLT_TkMu50();
  const int &HLT_AK8PFHT700_TrimR0p1PT0p03Mass50();
  const int &HLT_AK8PFJet360_TrimMass30();
  const int &HLT_PFHT800();
  const int &HLT_PFHT900();
  const int &HLT_PFHT650_WideJetMJJ900DEtaJJ1p5();
  const int &HLT_PFHT650_WideJetMJJ950DEtaJJ1p5();
  const int &HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20();
  const int &pass_duplicate_se_sm();
  const int &pass_duplicate_sm_se();
  const float &gen_ht();
  const float &nvtx();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_p4();
  const float &L_pt();
  const float &L_eta();
  const float &L_phi();
  const float &L_mass();
  const float &L_energy();
  const int &L_id();
  const int &L_idx();
  const int &L_isTightPOG();
  const float &L_miniIsoEA();
  const float &L_relIso03EA();
  const float &L_relIso04DB();
  const float &L_relIso0025EA();
  const float &L_relIso005EA();
  const float &L_relIso01EA();
  const float &L_relIso02EA();
  const float &L_relIso04EA();
  const float &L_relIso08EA();
  const float &L_relIso0025EAwLep();
  const float &L_relIso005EAwLep();
  const float &L_relIso01EAwLep();
  const float &L_relIso02EAwLep();
  const float &L_relIso04EAwLep();
  const float &L_relIso08EAwLep();
  const float &L_ip3d();
  const float &L_ip3derr();
  const float &L_dxy();
  const float &L_dz();
  const int &L_isFromW();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &X_p4();
  const float &X_pt();
  const float &X_phi();
  const float &X_up_pt();
  const float &X_up_phi();
  const float &X_dn_pt();
  const float &X_dn_phi();
  const float &X_gen_pt();
  const float &X_gen_phi();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &J_p4();
  const float &J_pt();
  const float &J_eta();
  const float &J_phi();
  const float &J_mass();
  const float &J_energy();
  const float &J_tau31();
  const float &J_tau32();
  const float &J_tau21();
  const float &J_tau1();
  const float &J_tau2();
  const float &J_tau3();
  const float &J_undoJEC();
  const float &J_shift();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &J_SD_p4();
  const float &J_SD_pt();
  const float &J_SD_eta();
  const float &J_SD_phi();
  const float &J_SD_mass();
  const float &J_SD_energy();
  const float &J_SD_tau31();
  const float &J_SD_tau32();
  const float &J_SD_tau21();
  const float &J_SD_tau1();
  const float &J_SD_tau2();
  const float &J_SD_tau3();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &q0_p4();
  const float &q0_pt();
  const float &q0_eta();
  const float &q0_phi();
  const float &q0_mass();
  const float &q0_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &q1_p4();
  const float &q1_pt();
  const float &q1_eta();
  const float &q1_phi();
  const float &q1_mass();
  const float &q1_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &V_p4();
  const float &V_pt();
  const float &V_eta();
  const float &V_phi();
  const float &V_mass();
  const float &V_energy();
  const float &V_SD_mass();
  const float &V_tau31();
  const float &V_tau32();
  const float &V_tau21();
  const float &V_tau1();
  const float &V_tau2();
  const float &V_tau3();
  const float &V_undoJEC();
  const float &V_shift();
  const float &V_deep_rawdisc_h4q();
  const float &V_deep_rawdisc_hbb();
  const float &V_deep_rawdisc_qcd();
  const float &V_deep_rawdisc_top();
  const float &V_deep_rawdisc_w();
  const float &V_deep_rawdisc_z();
  const float &V_deep_rawdisc_zbb();
  const float &V_softdropPuppiSubjet1_pt();
  const float &V_softdropPuppiSubjet1_eta();
  const float &V_softdropPuppiSubjet1_phi();
  const float &V_softdropPuppiSubjet1_mass();
  const float &V_softdropPuppiSubjet1_energy();
  const float &V_softdropPuppiSubjet2_pt();
  const float &V_softdropPuppiSubjet2_eta();
  const float &V_softdropPuppiSubjet2_phi();
  const float &V_softdropPuppiSubjet2_mass();
  const float &V_softdropPuppiSubjet2_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LXJ_p4();
  const float &LXJ_pt();
  const float &LXJ_eta();
  const float &LXJ_phi();
  const float &LXJ_mass();
  const float &LXJ_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LXJ_SD_p4();
  const float &LXJ_SD_pt();
  const float &LXJ_SD_eta();
  const float &LXJ_SD_phi();
  const float &LXJ_SD_mass();
  const float &LXJ_SD_energy();
  const float &LX_pt();
  const float &LX_mt();
  const float &LX_mass();
  const float &LX_dphi();
  const float &LJ_pt();
  const float &LJ_mt();
  const float &LJ_mass();
  const float &LJ_dphi();
  const float &LJ_deta();
  const float &LJ_dr();
  const float &LJ_dptf();
  const float &LJ_SD_pt();
  const float &LJ_SD_mt();
  const float &LJ_SD_mass();
  const float &LJ_SD_dphi();
  const float &LJ_SD_deta();
  const float &LJ_SD_dr();
  const float &LJ_SD_dptf();
  const float &Lq0_pt();
  const float &Lq0_mt();
  const float &Lq0_mass();
  const float &Lq0_dphi();
  const float &Lq0_deta();
  const float &Lq0_dr();
  const float &Lq0_dptf();
  const float &Lq1_pt();
  const float &Lq1_mt();
  const float &Lq1_mass();
  const float &Lq1_dphi();
  const float &Lq1_deta();
  const float &Lq1_dr();
  const float &Lq1_dptf();
  const float &Lqmax_pt();
  const float &Lqmax_mt();
  const float &Lqmax_mass();
  const float &Lqmax_dphi();
  const float &Lqmax_deta();
  const float &Lqmax_dr();
  const float &Lqmax_dptf();
  const float &LHRatio();
  const float &LHRatio_SD();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_h();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Wlep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Wlep_h_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &H_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &H_mh_p4();
  const float &det();
  const float &detW();
  const float &mH();
  const float &mD();
  const float &mD_SD();
  const float &mD_Wlep();
  const vector<float> &j_dphis();
  const vector<float> &j_drs();
  const vector<float> &j_SD_dphis();
  const vector<float> &j_SD_drs();
  const vector<float> &j_pts();
  const int &nj();
  const int &nj_in();
  const int &nj_annuli();
  const int &nj_same();
  const int &nj_away();
  const int &nj_SD_in();
  const int &nj_SD_annuli();
  const int &nj_SD_same();
  const int &nj_SD_away();
  const int &nb();
  const int &nb_in();
  const int &nb_annuli();
  const int &nb_same();
  const int &nb_away();
  const int &nb_SD_in();
  const int &nb_SD_annuli();
  const int &nb_SD_same();
  const int &nb_SD_away();
  const int &nbmed();
  const int &nbmed_in();
  const int &nbmed_annuli();
  const int &nbmed_same();
  const int &nbmed_away();
  const int &nbmed_SD_in();
  const int &nbmed_SD_annuli();
  const int &nbmed_SD_same();
  const int &nbmed_SD_away();
  const int &nbtight();
  const int &nbtight_in();
  const int &nbtight_annuli();
  const int &nbtight_same();
  const int &nbtight_away();
  const int &nbtight_SD_in();
  const int &nbtight_SD_annuli();
  const int &nbtight_SD_same();
  const int &nbtight_SD_away();
  const float &ht();
  const float &ht_in();
  const float &ht_annuli();
  const float &ht_same();
  const float &ht_away();
  const float &ht_SD_in();
  const float &ht_SD_annuli();
  const float &ht_SD_same();
  const float &ht_SD_away();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &R_p4();
  const float &R_pt();
  const float &R_eta();
  const float &R_phi();
  const float &R_mass();
  const float &R_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &R_cent_p4();
  const float &R_cent_pt();
  const float &R_cent_eta();
  const float &R_cent_phi();
  const float &R_cent_mass();
  const float &R_cent_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_recoil_p4();
  const int &gen_recoil_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_higgs_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_whad_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_wlep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_lep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_neu_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq1_p4();
  const int &gen_Vq0_id();
  const int &gen_Vq1_id();
  const int &gen_q0_id();
  const int &gen_q1_id();
  const int &gen_lep_id();
  const int &gen_neu_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_b0_p4();
  const float &gen_b0_pt();
  const float &gen_b0_eta();
  const float &gen_b0_phi();
  const float &gen_b0_mass();
  const float &gen_b0_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_b1_p4();
  const float &gen_b1_pt();
  const float &gen_b1_eta();
  const float &gen_b1_phi();
  const float &gen_b1_mass();
  const float &gen_b1_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_t0_p4();
  const float &gen_t0_pt();
  const float &gen_t0_eta();
  const float &gen_t0_phi();
  const float &gen_t0_mass();
  const float &gen_t0_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_t1_p4();
  const float &gen_t1_pt();
  const float &gen_t1_eta();
  const float &gen_t1_phi();
  const float &gen_t1_mass();
  const float &gen_t1_energy();
  const float &gen_b0_dr();
  const int &gen_b0_in();
  const int &gen_b0_annuli();
  const int &gen_b0_same();
  const int &gen_b0_away();
  const float &gen_b1_dr();
  const int &gen_b1_in();
  const int &gen_b1_annuli();
  const int &gen_b1_same();
  const int &gen_b1_away();
  const float &gen_b0_SD_dr();
  const int &gen_b0_SD_in();
  const int &gen_b0_SD_annuli();
  const int &gen_b0_SD_same();
  const int &gen_b0_SD_away();
  const float &gen_b1_SD_dr();
  const int &gen_b1_SD_in();
  const int &gen_b1_SD_annuli();
  const int &gen_b1_SD_same();
  const int &gen_b1_SD_away();
  const float &gen_t0_dr();
  const int &gen_t0_in();
  const int &gen_t0_annuli();
  const int &gen_t0_same();
  const int &gen_t0_away();
  const float &gen_t1_dr();
  const int &gen_t1_in();
  const int &gen_t1_annuli();
  const int &gen_t1_same();
  const int &gen_t1_away();
  const float &gen_t0_SD_dr();
  const int &gen_t0_SD_in();
  const int &gen_t0_SD_annuli();
  const int &gen_t0_SD_same();
  const int &gen_t0_SD_away();
  const float &gen_t1_SD_dr();
  const int &gen_t1_SD_in();
  const int &gen_t1_SD_annuli();
  const int &gen_t1_SD_same();
  const int &gen_t1_SD_away();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern hwwtree hww;
#endif

namespace tas {
  const int &run();
  const int &lumi();
  const unsigned long long &evt();
  const int &isData();
  const float &evt_scale1fb();
  const float &genps_weight();
  const float &xsec_br();
  const int &evt_passgoodrunlist();
  const TString &CMS4path();
  const int &CMS4index();
  const float &weight_fr_r1_f1();
  const float &weight_fr_r1_f2();
  const float &weight_fr_r1_f0p5();
  const float &weight_fr_r2_f1();
  const float &weight_fr_r2_f2();
  const float &weight_fr_r2_f0p5();
  const float &weight_fr_r0p5_f1();
  const float &weight_fr_r0p5_f2();
  const float &weight_fr_r0p5_f0p5();
  const float &weight_pdf_up();
  const float &weight_pdf_down();
  const float &weight_alphas_down();
  const float &weight_alphas_up();
  const int &HLT_Ele27_WPLoose_Gsf();
  const int &HLT_Ele30_WPLoose_Gsf();
  const int &HLT_Ele45_WPLoose_Gsf();
  const int &HLT_Ele105_CaloIdVT_GsfTrkIdT();
  const int &HLT_Ele115_CaloIdVT_GsfTrkIdT();
  const int &HLT_IsoTkMu24();
  const int &HLT_IsoMu24();
  const int &HLT_SingleMu50();
  const int &HLT_SingleEl40();
  const int &HLT_Ele50_CaloIdVT_GsfTrkIdT_PFJet165();
  const int &HLT_Mu50();
  const int &HLT_TkMu50();
  const int &HLT_AK8PFHT700_TrimR0p1PT0p03Mass50();
  const int &HLT_AK8PFJet360_TrimMass30();
  const int &HLT_PFHT800();
  const int &HLT_PFHT900();
  const int &HLT_PFHT650_WideJetMJJ900DEtaJJ1p5();
  const int &HLT_PFHT650_WideJetMJJ950DEtaJJ1p5();
  const int &HLT_AK8PFDiJet280_200_TrimMass30_CSVM_0p20();
  const int &pass_duplicate_se_sm();
  const int &pass_duplicate_sm_se();
  const float &gen_ht();
  const float &nvtx();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &L_p4();
  const float &L_pt();
  const float &L_eta();
  const float &L_phi();
  const float &L_mass();
  const float &L_energy();
  const int &L_id();
  const int &L_idx();
  const int &L_isTightPOG();
  const float &L_miniIsoEA();
  const float &L_relIso03EA();
  const float &L_relIso04DB();
  const float &L_relIso0025EA();
  const float &L_relIso005EA();
  const float &L_relIso01EA();
  const float &L_relIso02EA();
  const float &L_relIso04EA();
  const float &L_relIso08EA();
  const float &L_relIso0025EAwLep();
  const float &L_relIso005EAwLep();
  const float &L_relIso01EAwLep();
  const float &L_relIso02EAwLep();
  const float &L_relIso04EAwLep();
  const float &L_relIso08EAwLep();
  const float &L_ip3d();
  const float &L_ip3derr();
  const float &L_dxy();
  const float &L_dz();
  const int &L_isFromW();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &X_p4();
  const float &X_pt();
  const float &X_phi();
  const float &X_up_pt();
  const float &X_up_phi();
  const float &X_dn_pt();
  const float &X_dn_phi();
  const float &X_gen_pt();
  const float &X_gen_phi();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &J_p4();
  const float &J_pt();
  const float &J_eta();
  const float &J_phi();
  const float &J_mass();
  const float &J_energy();
  const float &J_tau31();
  const float &J_tau32();
  const float &J_tau21();
  const float &J_tau1();
  const float &J_tau2();
  const float &J_tau3();
  const float &J_undoJEC();
  const float &J_shift();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &J_SD_p4();
  const float &J_SD_pt();
  const float &J_SD_eta();
  const float &J_SD_phi();
  const float &J_SD_mass();
  const float &J_SD_energy();
  const float &J_SD_tau31();
  const float &J_SD_tau32();
  const float &J_SD_tau21();
  const float &J_SD_tau1();
  const float &J_SD_tau2();
  const float &J_SD_tau3();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &q0_p4();
  const float &q0_pt();
  const float &q0_eta();
  const float &q0_phi();
  const float &q0_mass();
  const float &q0_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &q1_p4();
  const float &q1_pt();
  const float &q1_eta();
  const float &q1_phi();
  const float &q1_mass();
  const float &q1_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &V_p4();
  const float &V_pt();
  const float &V_eta();
  const float &V_phi();
  const float &V_mass();
  const float &V_energy();
  const float &V_SD_mass();
  const float &V_tau31();
  const float &V_tau32();
  const float &V_tau21();
  const float &V_tau1();
  const float &V_tau2();
  const float &V_tau3();
  const float &V_undoJEC();
  const float &V_shift();
  const float &V_deep_rawdisc_h4q();
  const float &V_deep_rawdisc_hbb();
  const float &V_deep_rawdisc_qcd();
  const float &V_deep_rawdisc_top();
  const float &V_deep_rawdisc_w();
  const float &V_deep_rawdisc_z();
  const float &V_deep_rawdisc_zbb();
  const float &V_softdropPuppiSubjet1_pt();
  const float &V_softdropPuppiSubjet1_eta();
  const float &V_softdropPuppiSubjet1_phi();
  const float &V_softdropPuppiSubjet1_mass();
  const float &V_softdropPuppiSubjet1_energy();
  const float &V_softdropPuppiSubjet2_pt();
  const float &V_softdropPuppiSubjet2_eta();
  const float &V_softdropPuppiSubjet2_phi();
  const float &V_softdropPuppiSubjet2_mass();
  const float &V_softdropPuppiSubjet2_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LXJ_p4();
  const float &LXJ_pt();
  const float &LXJ_eta();
  const float &LXJ_phi();
  const float &LXJ_mass();
  const float &LXJ_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &LXJ_SD_p4();
  const float &LXJ_SD_pt();
  const float &LXJ_SD_eta();
  const float &LXJ_SD_phi();
  const float &LXJ_SD_mass();
  const float &LXJ_SD_energy();
  const float &LX_pt();
  const float &LX_mt();
  const float &LX_mass();
  const float &LX_dphi();
  const float &LJ_pt();
  const float &LJ_mt();
  const float &LJ_mass();
  const float &LJ_dphi();
  const float &LJ_deta();
  const float &LJ_dr();
  const float &LJ_dptf();
  const float &LJ_SD_pt();
  const float &LJ_SD_mt();
  const float &LJ_SD_mass();
  const float &LJ_SD_dphi();
  const float &LJ_SD_deta();
  const float &LJ_SD_dr();
  const float &LJ_SD_dptf();
  const float &Lq0_pt();
  const float &Lq0_mt();
  const float &Lq0_mass();
  const float &Lq0_dphi();
  const float &Lq0_deta();
  const float &Lq0_dr();
  const float &Lq0_dptf();
  const float &Lq1_pt();
  const float &Lq1_mt();
  const float &Lq1_mass();
  const float &Lq1_dphi();
  const float &Lq1_deta();
  const float &Lq1_dr();
  const float &Lq1_dptf();
  const float &Lqmax_pt();
  const float &Lqmax_mt();
  const float &Lqmax_mass();
  const float &Lqmax_dphi();
  const float &Lqmax_deta();
  const float &Lqmax_dr();
  const float &Lqmax_dptf();
  const float &LHRatio();
  const float &LHRatio_SD();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &neu_p4_h();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Wlep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &Wlep_h_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &H_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &H_mh_p4();
  const float &det();
  const float &detW();
  const float &mH();
  const float &mD();
  const float &mD_SD();
  const float &mD_Wlep();
  const vector<float> &j_dphis();
  const vector<float> &j_drs();
  const vector<float> &j_SD_dphis();
  const vector<float> &j_SD_drs();
  const vector<float> &j_pts();
  const int &nj();
  const int &nj_in();
  const int &nj_annuli();
  const int &nj_same();
  const int &nj_away();
  const int &nj_SD_in();
  const int &nj_SD_annuli();
  const int &nj_SD_same();
  const int &nj_SD_away();
  const int &nb();
  const int &nb_in();
  const int &nb_annuli();
  const int &nb_same();
  const int &nb_away();
  const int &nb_SD_in();
  const int &nb_SD_annuli();
  const int &nb_SD_same();
  const int &nb_SD_away();
  const int &nbmed();
  const int &nbmed_in();
  const int &nbmed_annuli();
  const int &nbmed_same();
  const int &nbmed_away();
  const int &nbmed_SD_in();
  const int &nbmed_SD_annuli();
  const int &nbmed_SD_same();
  const int &nbmed_SD_away();
  const int &nbtight();
  const int &nbtight_in();
  const int &nbtight_annuli();
  const int &nbtight_same();
  const int &nbtight_away();
  const int &nbtight_SD_in();
  const int &nbtight_SD_annuli();
  const int &nbtight_SD_same();
  const int &nbtight_SD_away();
  const float &ht();
  const float &ht_in();
  const float &ht_annuli();
  const float &ht_same();
  const float &ht_away();
  const float &ht_SD_in();
  const float &ht_SD_annuli();
  const float &ht_SD_same();
  const float &ht_SD_away();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &R_p4();
  const float &R_pt();
  const float &R_eta();
  const float &R_phi();
  const float &R_mass();
  const float &R_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &R_cent_p4();
  const float &R_cent_pt();
  const float &R_cent_eta();
  const float &R_cent_phi();
  const float &R_cent_mass();
  const float &R_cent_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_recoil_p4();
  const int &gen_recoil_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_higgs_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_whad_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_wlep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_q1_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_lep_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_neu_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq0_p4();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_Vq1_p4();
  const int &gen_Vq0_id();
  const int &gen_Vq1_id();
  const int &gen_q0_id();
  const int &gen_q1_id();
  const int &gen_lep_id();
  const int &gen_neu_id();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_b0_p4();
  const float &gen_b0_pt();
  const float &gen_b0_eta();
  const float &gen_b0_phi();
  const float &gen_b0_mass();
  const float &gen_b0_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_b1_p4();
  const float &gen_b1_pt();
  const float &gen_b1_eta();
  const float &gen_b1_phi();
  const float &gen_b1_mass();
  const float &gen_b1_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_t0_p4();
  const float &gen_t0_pt();
  const float &gen_t0_eta();
  const float &gen_t0_phi();
  const float &gen_t0_mass();
  const float &gen_t0_energy();
  const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > &gen_t1_p4();
  const float &gen_t1_pt();
  const float &gen_t1_eta();
  const float &gen_t1_phi();
  const float &gen_t1_mass();
  const float &gen_t1_energy();
  const float &gen_b0_dr();
  const int &gen_b0_in();
  const int &gen_b0_annuli();
  const int &gen_b0_same();
  const int &gen_b0_away();
  const float &gen_b1_dr();
  const int &gen_b1_in();
  const int &gen_b1_annuli();
  const int &gen_b1_same();
  const int &gen_b1_away();
  const float &gen_b0_SD_dr();
  const int &gen_b0_SD_in();
  const int &gen_b0_SD_annuli();
  const int &gen_b0_SD_same();
  const int &gen_b0_SD_away();
  const float &gen_b1_SD_dr();
  const int &gen_b1_SD_in();
  const int &gen_b1_SD_annuli();
  const int &gen_b1_SD_same();
  const int &gen_b1_SD_away();
  const float &gen_t0_dr();
  const int &gen_t0_in();
  const int &gen_t0_annuli();
  const int &gen_t0_same();
  const int &gen_t0_away();
  const float &gen_t1_dr();
  const int &gen_t1_in();
  const int &gen_t1_annuli();
  const int &gen_t1_same();
  const int &gen_t1_away();
  const float &gen_t0_SD_dr();
  const int &gen_t0_SD_in();
  const int &gen_t0_SD_annuli();
  const int &gen_t0_SD_same();
  const int &gen_t0_SD_away();
  const float &gen_t1_SD_dr();
  const int &gen_t1_SD_in();
  const int &gen_t1_SD_annuli();
  const int &gen_t1_SD_same();
  const int &gen_t1_SD_away();
}
#include "rooutil.h"
#endif
